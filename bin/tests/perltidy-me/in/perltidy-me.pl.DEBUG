Use -dump-token-types (-dtt) to get a list of token type codes
2: 
2: 
3: # POD in 5 mins http://juerd.nl/site.plp/perlpodtut
3: ###################################################
4: 
4: 
53: 
53: 
54: use strict;
54: kkkbwwwwww;
55: use warnings;
55: kkkbwwwwwwww;
56: use English -no_match_vars;
56: kkkbwwwwwwwbmwwwwwwwwwwwww;
57: use Getopt::ArgvFile defult => 1; # allows specifying an @options file to read more command line arguments from
57: kkkbwwwwwwwwwwwwwwwwbwwwwwwb=>bn;b#############################################################################
58: use Getopt::Long;
58: kkkbwwwwwwwwwwww;
59: use Pod::Usage;
59: kkkbwwwwwwwwww;
60: #use Getopt::Long::Descriptive; # https://github.com/rjbs/Getopt-Long-Descriptive/blob/master/lib/Getopt/Long/Descriptive.pm
60: ############################################################################################################################
61: #use Switch;
61: ############
62: use Data::Dumper;
62: kkkbwwwwwwwwwwww;
63: 
63: 
64: use File::Copy qw(cp); # copy and preserve source files permissions
64: kkkbwwwwwwwwwwbqqqqqq;b############################################
65: use File::Slurp qw(:std :edit);
65: kkkbwwwwwwwwwwwbqqqqqqqqqqqqqq;
66: use Fatal qw(cp);
66: kkkbwwwwwbqqqqqq;
67: 
67: 
68: our $VERSION = 0.1; # shown by --version option
68: kkkbiiiiiiiib=bnnn;b###########################
69: 
69: 
70: # Big hash of vars and constants for the program
70: ################################################
71: my %Var = (
71: kkbiiiib=b{
72: rhArg => {
72: wwwwwb=>b{
73: rhOpt => {
73: wwwwwb=>b{
74: '' => 0, # indicates standard in/out as - on command line
74: QQb=>bn,b################################################
75: verbose => 1, # default value for verbose
75: wwwwwwwb=>bn,b###########################
76: debug => 0,
76: wwwwwb=>bn,
77: man => 0,     # show full help page
77: wwwb=>bn,bbbbb#####################
78: },
78: },
79: raFile => [],
79: wwwwwwb=>b{},
80: },
80: },
81: rhGetopt => {
81: wwwwwwwwb=>b{
82: result => undef,
82: wwwwwwb=>bkkkkk,
83: raErrors => [],
83: wwwwwwwwb=>b{},
84: raConfig => [
84: wwwwwwwwb=>b{
85: "bundling",     # bundle single char options ie ps -aux
85: QQQQQQQQQQ,bbbbb#######################################
86: "auto_version", # supplies --version option
86: QQQQQQQQQQQQQQ,b###########################
87: "auto_help",    # supplies --help -? options to show usage in POD SYNOPSIS
87: QQQQQQQQQQQ,bbbb##########################################################
88: ##			"debug",        # debug the argument processing
88: ####################################################
89: ],
89: },
90: raOpts => [
90: wwwwwwb=>b{
91: "length|l=i", # numeric required --length or -l (explicit defined)
91: QQQQQQQQQQQQ,b####################################################
92: "width:3",    # numeric optional with default value if none given on command line but not necessarily the default assigned if not present on command line
92: QQQQQQQQQ,bbbb###########################################################################################################################################
93: "ratio|r:f",  # float optional
93: QQQQQQQQQQQ,bb################
94: "hex=o",      # extended integer a number in decimal, octal, hex or binary
94: QQQQQQQ,bbbbbb############################################################
95: ## cannot repeat when bundling is turned on
95: ###########################################
96: ##		"point:f{2}", # two floats separated by comma --point=1.3,24.5
96: ##################################################################
97: "file=s",     # string required --file or -f (implicit)
97: QQQQQQQQ,bbbbb#########################################
98: "splat:s",    # a file to edit in place
98: QQQQQQQQQ,bbbb#########################
99: "in:s",       # to test stdin=-
99: QQQQQQ,bbbbbbb#################
100: "out:s",      # to test stdout=-
100: QQQQQQQ,bbbbbb##################
101: "name|n=s@",  # multivalued array string
101: QQQQQQQQQQQ,bb##########################
102: "map|m=s%",   # multivalued hash key=value
102: QQQQQQQQQQ,bbb############################
103: "debug|d+",   # incremental keep specifying to increase
103: QQQQQQQQQQ,bbb#########################################
104: "verbose|v!", # flag --verbose or --noverbose
104: QQQQQQQQQQQQ,b###############################
105: "",           # empty string allows - to signify standard in/out as a file
105: QQ,bbbbbbbbbbb############################################################
106: "man",        # show manual page only
106: QQQQQ,bbbbbbbb#######################
107: ],
107: },
108: raMandatory => [], # additional mandatory paramters not defined by = above.
108: wwwwwwwwwwwb=>b{},b########################################################
109: roParser => Getopt::Long::Parser->new,
109: wwwwwwwwb=>bwwwwwwwwwwwwwwwwwwwwwwwww,
110: },
110: },
111: );
111: };
112: 
112: 
113: getOptions();
113: UUUUUUUUUU{};
114: 
114: 
115: sub main
115: iiiiiiii
116: {
116: {
117: my ($rhOpt, $raFiles, $use_stdio) = @ARG;
117: kkb{iiiiii,biiiiiiii,biiiiiiiiii}b=biiii;
118: debug("Var: " . Dumper(\%Var), 2);
118: UUUUU{QQQQQQQb.bUUUUUU{\iiii},bn};
119: debug("main() rhOpt: " . Dumper($rhOpt) . "\nraFiles: " . Dumper($raFiles) . "\nuse_stdio: $use_stdio\n", 2);
119: UUUUU{QQQQQQQQQQQQQQQQb.bUUUUUU{iiiiii}b.bQQQQQQQQQQQQQb.bUUUUUU{iiiiiiii}b.bQQQQQQQQQQQQQQQQQQQQQQQQQQQ,bn};
120: 
120: 
121: if ($use_stdio)
121: kkb{iiiiiiiiii}
122: {
122: {
123: processStdio($rhOpt);
123: UUUUUUUUUUUU{iiiiii};
124: }
124: }
125: processFiles($raFiles, $rhOpt) if scalar(@$raFiles);
125: UUUUUUUUUUUU{iiiiiiii,biiiiii}bkkbkkkkkk{iiiiiiiii};
126: 
126: 
127: # Example in-place editing of file
127: ##################################
128: if (exists $rhOpts->{splat})
128: kkb{kkkkkkbiiiiiii->LwwwwwR}
129: {
129: {
130: editFileInPlace($rhOpts->{splat}, ".bak", $rhOpts);
130: UUUUUUUUUUUUUUU{iiiiiii->LwwwwwR,bQQQQQQ,biiiiiii};
131: }
131: }
132: }
132: }
133: 
133: 
134: sub setup
134: iiiiiiiii
135: {
135: {
136: my ($rhOpt) = @ARG;
136: kkb{iiiiii}b=biiii;
137: debug("Var: " . Dumper(\%Var), 2);
137: UUUUU{QQQQQQQb.bUUUUUU{\iiii},bn};
138: debug("setup() rhOpt: " . Dumper($rhOpt), 2);
138: UUUUU{QQQQQQQQQQQQQQQQQb.bUUUUUU{iiiiii},bn};
139: }
139: }
140: 
140: 
141: sub processStdio
141: iiiiiiiiiiiiiiii
142: {
142: {
143: my ($rhOpt) = @ARG;
143: kkb{iiiiii}b=biiii;
144: debug("processStdio()\n");
144: UUUUU{QQQQQQQQQQQQQQQQQQ};
145: my $rContent = read_file(\*STDIN, scalar_ref => 1);
145: kkbiiiiiiiiib=bUUUUUUUUU{\iiiiii,bwwwwwwwwwwb=>bn};
146: doReplacement($rContent);
146: UUUUUUUUUUUUU{iiiiiiiii};
147: print $$rContent;
147: kkkkkbZZZZZZZZZZ;
148: }
148: }
149: 
149: 
150: sub processFiles
150: iiiiiiiiiiiiiiii
151: {
151: {
152: my ($raFiles, $rhOpt) = @ARG;
152: kkb{iiiiiiii,biiiiii}b=biiii;
153: debug("processFiles()\n");
153: UUUUU{QQQQQQQQQQQQQQQQQQ};
154: foreach my $fileName (@$raFiles)
154: kkkkkkkbkkbiiiiiiiiib{iiiiiiiii}
155: {
155: {
156: processFile($fileName, $rhOpt);
156: UUUUUUUUUUU{iiiiiiiii,biiiiii};
157: }
157: }
158: }
158: }
159: 
159: 
160: sub processFile
160: iiiiiiiiiiiiiii
161: {
161: {
162: my ($fileName, $rhOpt) = @ARG;
162: kkb{iiiiiiiii,biiiiii}b=biiii;
163: debug("processFile($fileName)\n");
163: UUUUU{QQQQQQQQQQQQQQQQQQQQQQQQQQ};
164: 
164: 
165: # example slurp in the file and show something
165: ##############################################
166: my $rContent = read_file($fileName, scalar_ref => 1);
166: kkbiiiiiiiiib=bUUUUUUUUU{iiiiiiiii,bwwwwwwwwwwb=>bn};
167: print "length: " . length($$rContent) . "\n";
167: kkkkkbQQQQQQQQQQb.bkkkkkk{iiiiiiiiii}b.bQQQQ;
168: doReplacement($rContent);
168: UUUUUUUUUUUUU{iiiiiiiii};
169: print $$rContent;
169: kkkkkbZZZZZZZZZZ;
170: }
170: }
171: 
171: 
172: sub doReplacement
172: iiiiiiiiiiiiiiiii
173: {
173: {
174: my ($rContent) = @ARG;
174: kkb{iiiiiiiii}b=biiii;
175: my $regex = qr{\A}xms;
175: kkbiiiiiib=bQQQQQQQQQ;
176: $$rContent =~ s{$regex}{splatted\n}xms;
176: iiiiiiiiiib=~bQQQQQQQQQQQQQQQQQQQQQQQQ;
177: return $rContent;
177: kkkkkkbiiiiiiiii;
178: }
178: }
179: 
179: 
180: sub editFileInPlace
180: iiiiiiiiiiiiiiiiiii
181: {
181: {
182: my ($fileName, $suffix, $rhOpts) = @ARG;
182: kkb{iiiiiiiii,biiiiiii,biiiiiii}b=biiii;
183: my $fileNameBackup = "$fileName$suffix";
183: kkbiiiiiiiiiiiiiiib=bQQQQQQQQQQQQQQQQQQ;
184: print "editFileInPlace($fileName) backup to $fileNameBackup\n";
184: kkkkkbQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ;
185: 
185: 
186: cp($fileName, $fileNameBackup);
186: UU{iiiiiiiii,biiiiiiiiiiiiiii};
187: edit_file { doReplacement(\$ARG) } $fileName;
187: GGGGGGGGGb{bUUUUUUUUUUUUU{\iiii}b}biiiiiiiii;
188: }
188: }
189: 
189: 
190: # Must manually check mandatory values present
190: ##############################################
191: sub checkOptions
191: iiiiiiiiiiiiiiii
192: {
192: {
193: my ($raErrors, $rhOpt, $raFiles, $use_stdio) = @ARG;
193: kkb{iiiiiiiii,biiiiii,biiiiiiii,biiiiiiiiii}b=biiii;
194: checkMandatoryOptions($raErrors, $rhOpt, $Var{rhGetopt}{raMandatory});
194: UUUUUUUUUUUUUUUUUUUUU{iiiiiiiii,biiiiii,biiiiLwwwwwwwwRLwwwwwwwwwwwR};
195: 
195: 
196: # Check additional parameter dependencies and push onto error array
196: ###################################################################
197: 
197: 
198: if (scalar(@$raErrors))
198: kkb{kkkkkk{iiiiiiiiii}}
199: {
199: {
200: usage(join("\n", @$raErrors));
200: UUUUU{kkkk{QQQQ,biiiiiiiiii}};
201: }
201: }
202: }
202: }
203: 
203: 
204: sub checkMandatoryOptions
204: iiiiiiiiiiiiiiiiiiiiiiiii
205: {
205: {
206: my ($raErrors, $rhOpt, $raMandatory) = @ARG;
206: kkb{iiiiiiiii,biiiiii,biiiiiiiiiiii}b=biiii;
207: 
207: 
208: $raMandatory = $raMandatory || [];
208: iiiiiiiiiiiib=biiiiiiiiiiiib||b{};
209: foreach my $option (@{$Var{rhGetopt}{raOpts}})
209: kkkkkkkbkkbiiiiiiib{tLiiiiLwwwwwwwwRLwwwwwwRR}
210: {
210: {
211: # Getopt option has = sign for mandatory options
211: ################################################
212: my $optName = undef;
212: kkbiiiiiiiib=bkkkkk;
213: $optName = $1 if $option =~ m{\A (\w+)}xms;
213: iiiiiiiib=biibkkbiiiiiiib=~bQQQQQQQQQQQQQQ;
214: if ($option =~ m{\A (\w+) .* =}xms
214: kkb{iiiiiiib=~bQQQQQQQQQQQQQQQQQQQ
215: || ($optName && grep { $ARG eq $optName } @{$raMandatory}))
215: ||b{iiiiiiiib&&bkkkkb{biiiibkkbiiiiiiiib}btLiiiiiiiiiiiiR}}
216: {
216: {
217: my $error = 0;
217: kkbiiiiiib=bn;
218: 
218: 
219: # Work out what type of parameter it might be
219: #############################################
220: my $type = "value";
220: kkbiiiiib=bQQQQQQQ;
221: $type = 'number value' if $option =~ m{=f}xms;
221: iiiiib=bQQQQQQQQQQQQQQbkkbiiiiiiib=~bQQQQQQQQ;
222: $type = 'integer value' if $option =~ m{=i}xms;
222: iiiiib=bQQQQQQQQQQQQQQQbkkbiiiiiiib=~bQQQQQQQQ;
223: $type = 'incremental value' if $option =~ m{\+}xms;
223: iiiiib=bQQQQQQQQQQQQQQQQQQQbkkbiiiiiiib=~bQQQQQQQQ;
224: $type = 'negatable value' if $option =~ m{\!}xms;
224: iiiiib=bQQQQQQQQQQQQQQQQQbkkbiiiiiiib=~bQQQQQQQQ;
225: $type = 'decimal/oct/hex/binary value' if $option =~ m{=o}xms;
225: iiiiib=bQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQbkkbiiiiiiib=~bQQQQQQQQ;
226: $type = 'string value' if $option =~ m{=s}xms;
226: iiiiib=bQQQQQQQQQQQQQQbkkbiiiiiiib=~bQQQQQQQQ;
227: $type =~ s{value}{multi-value}xms if $option =~ m{\@}xms;
227: iiiiib=~bQQQQQQQQQQQQQQQQQQQQQQQQbkkbiiiiiiib=~bQQQQQQQQ;
228: $type =~ s{value}{key/value pair}xms if $option =~ m{\%}xms;
228: iiiiib=~bQQQQQQQQQQQQQQQQQQQQQQQQQQQbkkbiiiiiiib=~bQQQQQQQQ;
229: 
229: 
230: if (exists($rhOpt->{$optName}))
230: kkb{kkkkkk{iiiiii->LiiiiiiiiR}}
231: {
231: {
232: my $ref = ref($rhOpt->{$optName});
232: kkbiiiib=bkkk{iiiiii->LiiiiiiiiR};
233: if ('ARRAY' eq $ref && 0 == scalar(@{$rhOpt->{$optName}}))
233: kkb{QQQQQQQbkkbiiiib&&bnb==bkkkkkk{tLiiiiii->LiiiiiiiiRR}}
234: {
234: {
235: $error = 1;
235: iiiiiib=bn;
236: # type might not be configured but we know it now
236: #################################################
237: $type =~ s{value}{multi-value}xms unless $type =~ m{multi-value}xms;
237: iiiiib=~bQQQQQQQQQQQQQQQQQQQQQQQQbkkkkkkbiiiiib=~bQQQQQQQQQQQQQQQQQ;
238: }
238: }
239: if ('HASH' eq $ref && 0 == scalar(keys(%{$rhOpt->{$optName}})))
239: kkb{QQQQQQbkkbiiiib&&bnb==bkkkkkk{kkkk{tLiiiiii->LiiiiiiiiRR}}}
240: {
240: {
241: $error = 1;
241: iiiiiib=bn;
242: # type might not be configured but we know it now
242: #################################################
243: $type =~ s{value}{key/value pair}xms unless $type =~ m{key/value}xms;
243: iiiiib=~bQQQQQQQQQQQQQQQQQQQQQQQQQQQbkkkkkkbiiiiib=~bQQQQQQQQQQQQQQQ;
244: }
244: }
245: }
245: }
246: else
246: kkkk
247: {
247: {
248: $error = 1;
248: iiiiiib=bn;
249: }
249: }
250: push(@$raErrors, "--$optName $type is a mandatory parameter.") if $error;
250: kkkk{iiiiiiiiii,bQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ}bkkbiiiiii;
251: }
251: }
252: }
252: }
253: return $raErrors;
253: kkkkkkbiiiiiiiii;
254: }
254: }
255: 
255: 
256: # Perform command line option processing and call main function.
256: ################################################################
257: sub getOptions
257: iiiiiiiiiiiiii
258: {
258: {
259: $Var{rhGetopt}{roParser}->configure(@{$Var{rhGetopt}{raConfig}});
259: iiiiLwwwwwwwwRLwwwwwwwwRiiiiiiiiiii{tLiiiiLwwwwwwwwRLwwwwwwwwRR};
260: $Var{rhGetopt}{result} = 	$Var{rhGetopt}{roParser}->getoptions(
260: iiiiLwwwwwwwwRLwwwwwwRb=bbiiiiLwwwwwwwwRLwwwwwwwwRiiiiiiiiiiii{
261: $Var{rhArg}{rhOpt},
261: iiiiLwwwwwRLwwwwwR,
262: @{$Var{rhGetopt}{raOpts}}
262: tLiiiiLwwwwwwwwRLwwwwwwRR
263: );
263: };
264: if ($Var{rhGetopt}{result})
264: kkb{iiiiLwwwwwwwwRLwwwwwwR}
265: {
265: {
266: manual() if $Var{rhArg}{rhOpt}{man};
266: UUUUUU{}bkkbiiiiLwwwwwRLwwwwwRLwwwR;
267: $Var{rhArg}{raFile} = \@ARGV;
267: iiiiLwwwwwRLwwwwwwRb=b\iiiii;
268: # set stdio option if no file names provided
268: ############################################
269: $Var{rhArg}{rhOpt}{''} = 1 unless scalar(@{$Var{rhArg}{raFile}});
269: iiiiLwwwwwRLwwwwwRLQQRb=bnbkkkkkkbkkkkkk{tLiiiiLwwwwwRLwwwwwwRR};
270: checkOptions(
270: UUUUUUUUUUUU{
271: $Var{rhGetopt}{raErrors},
271: iiiiLwwwwwwwwRLwwwwwwwwR,
272: $Var{rhArg}{rhOpt},
272: iiiiLwwwwwRLwwwwwR,
273: $Var{rhArg}{raFile},
273: iiiiLwwwwwRLwwwwwwR,
274: $Var{rhArg}{rhOpt}{''} ## use_stdio option
274: iiiiLwwwwwRLwwwwwRLQQRb###################
275: );
275: };
276: setup($Var{rhArg}{rhOpt});
276: UUUUU{iiiiLwwwwwRLwwwwwR};
277: main($Var{rhArg}{rhOpt}, $Var{rhArg}{raFile}, $Var{rhArg}{rhOpt}{''});
277: UUUU{iiiiLwwwwwRLwwwwwR,biiiiLwwwwwRLwwwwwwR,biiiiLwwwwwRLwwwwwRLQQR};
278: }
278: }
279: else
279: kkkk
280: {
280: {
281: # Here if unknown option provided
281: #################################
282: usage();
282: UUUUU{};
283: }
283: }
284: }
284: }
285: 
285: 
286: sub debug
286: iiiiiiiii
287: {
287: {
288: my ($msg, $level) = @ARG;
288: kkb{iiii,biiiiii}b=biiii;
289: $level ||= 1;
289: iiiiiib||=bn;
290: ##	print "debug @{[substr($msg,0,10)]} debug: $Var{'rhArg'}{'rhOpt'}{'debug'} level: $level\n";
290: ###############################################################################################
291: print $msg if ($Var{'rhArg'}{'rhOpt'}{'debug'} >= $level);
291: kkkkkbZZZZbkkb{iiiiLQQQQQQQRLQQQQQQQRLQQQQQQQRb>=biiiiii};
292: }
292: }
293: 
293: 
294: sub usage
294: iiiiiiiii
295: {
295: {
296: my ($msg) = @ARG;
296: kkb{iiii}b=biiii;
297: my %Opts = (
297: kkbiiiiib=b{
298: -exitval => 1,
298: mwwwwwwwb=>bn,
299: -verbose => 1,
299: mwwwwwwwb=>bn,
300: );
300: };
301: $Opts{-msg} = $msg if $msg;
301: iiiiiLmwwwRb=biiiibkkbiiii;
302: pod2usage(%Opts);
302: UUUUUUUUU{iiiii};
303: }
303: }
304: 
304: 
305: sub manual
305: iiiiiiiiii
306: {
306: {
307: pod2usage(
307: UUUUUUUUU{
308: -exitval => 0,
308: mwwwwwwwb=>bn,
309: -verbose => 2,
309: mwwwwwwwb=>bn,
310: );
310: };
311: }
311: }
312: 
312: 
