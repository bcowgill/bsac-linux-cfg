NAME
    pretty-elements.pl - Format some HTML elements one attribute per line.

AUTHOR
    Brent S.A. Cowgill

SYNOPSIS
    pretty-elements.pl [options] [@options-file ...] [file ...]

            Options:
                    --edit           edit the files in place
                    --warn-files     turn on display of filename for every warning
                    --version        display program version
                    --help -?        brief help message
                    --man            full help message

OPTIONS
    --edit or --noedit
                    Causes HTML elements to be edited in place in the input files.

    --warn-files or --nowarn-files
                    Causes the file name to be shown for all warning messages.
                    Normally it only prints the file name for the first warning in a
                    given file.

    --version
                    Prints the program version and exit.

    --help or -?
                    Print a brief help message and exit.

    --man
                    Print the full help message and exit.

DESCRIPTION
            This program will read the given input file(s) and format some
            of the HTML elements with one attribute per line. Also puts some
            attributes into specific order for consistency i.e. id class name.

            It does a check on id/name attributes and gives warnings about
            duplicate id's and mismatches in id/name for form input fields.

            It has some support for Template::Toolkit and tries to work around
            attributes which are included within [% IF %] blocks.

EXAMPLES
            pretty-elements.pl views/*.tt

            ./pretty-elements.pl tests/pretty-elements/sample-html-elements.txt
            ./pretty-elements.pl tests/pretty-elements/sample-html-elements.txt 2>&1 | less

            find some types of tags which might have lots of attributes

            perl -ne 'sub BEGIN { $/ = undef; } s{([\ \t]*<(input|textarea|select|option|button|div|iframe|form|dl|a) \s+ [^>]+ >)}{print qq{$1\n}}xmsge; ' views/*.tt | less

            find anything and print by length of the tag

            perl -ne 'sub BEGIN { $/ = undef; } s{(<[a-zA-Z] [^>]* >)}{my $tag = $1; my $otag = $1; $tag =~ s{(\s)\s*}{\ }xmsg; print qq{@{[length($otag)]} $tag\n}}xmsge; ' views/*.tt | sort -n -r | less

