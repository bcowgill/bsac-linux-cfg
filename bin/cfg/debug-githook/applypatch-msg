#!/bin/sh
PRE="`date` applypatch-msg:"
LOG=~/githook.log
echo === $PRE $0 entered ========================= >> $LOG
echo $PRE HOSTNAME: $HOSTNAME TYPE: $MACHTYPE $HOSTTYPE $OSTYPE LOGNAME: $LOGNAME USER: $USER HOME: $HOME >> $LOG
echo $PRE DISPLAY: $DISPLAY TERM: $TERM LANG: $LANG TZ: $TZ PWD: $PWD >> $LOG
echo $PRE SHLVL: $SHLVL -: $- UID: $UID EUID: $EUID PPID: $PPID WINDOWID: $WINDOWID COL: $COLUMNS LINES: $LINES $BASH $BASH_VERSION >> $LOG
echo $PRE EDITOR: $EDITOR >> $LOG
echo $PRE PATH: $PATH >> $LOG
echo $PRE GIT_DIR: $GIT_DIR >> $LOG
echo $PRE GIT_EDITOR: $GIT_EDITOR >> $LOG
echo $PRE core.hooksPath: `git config core.hooksPath` >> $LOG
if echo $SSH_ASKPASS | grep git-gui > /dev/null; then
	echo $PRE git gui: yes >> $LOG
else
	echo $PRE git gui: no >> $LOG
fi
echo $PRE Args: $* >> $LOG
echo $PRE Arg1: $1 >> $LOG
echo $PRE Arg2: $2 >> $LOG
echo $PRE Arg3: $3 >> $LOG
echo $PRE Arg4: $4 >> $LOG
echo $PRE Arg5: $5 >> $LOG
echo $PRE Arg6: $6 >> $LOG
echo $PRE Arg7: $7 >> $LOG
echo $PRE Arg8: $8 >> $LOG
echo $PRE Arg9: $9 >> $LOG
git status >> $LOG
unset PRE
set >> $LOG
echo --------------------------------------------- >> $LOG
#
# An example applypatch-msg hook script for debugging.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".
#
# https://git-scm.com/docs/githooks
# This hook is invoked by git am. It takes a single parameter, the name of the file that holds the proposed commit log message. Exiting with a non-zero status causes git am to abort before applying the patch.

# The hook is allowed to edit the message file in place, and can be used to normalize the message into some project standard format. It can also be used to refuse the commit after inspecting the message file.

# The default applypatch-msg hook, when enabled, runs the commit-msg hook, if the latter is enabled.
ORIG_MSG="$1"
