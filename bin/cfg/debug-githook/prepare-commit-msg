#!/bin/sh
PRE="`date` prepare-commit-msg:"
LOG=~/githook.log
echo === $PRE $0 entered ========================= >> $LOG
echo $PRE HOSTNAME: $HOSTNAME TYPE: $MACHTYPE $HOSTTYPE $OSTYPE LOGNAME: $LOGNAME USER: $USER HOME: $HOME >> $LOG
echo $PRE DISPLAY: $DISPLAY TERM: $TERM LANG: $LANG TZ: $TZ PWD: $PWD >> $LOG
echo $PRE SHLVL: $SHLVL -: $- UID: $UID EUID: $EUID PPID: $PPID WINDOWID: $WINDOWID COL: $COLUMNS LINES: $LINES $BASH $BASH_VERSION >> $LOG
echo $PRE EDITOR: $EDITOR >> $LOG
echo $PRE PATH: $PATH >> $LOG
echo $PRE GIT_DIR: $GIT_DIR >> $LOG
echo $PRE GIT_EDITOR: $GIT_EDITOR >> $LOG
echo $PRE core.hooksPath: `git config core.hooksPath` >> $LOG
if echo $SSH_ASKPASS | grep git-gui > /dev/null; then
	echo $PRE git gui: yes >> $LOG
else
	echo $PRE git gui: no >> $LOG
fi
echo $PRE Args: $* >> $LOG
echo $PRE Arg1: $1 >> $LOG
echo $PRE Arg2: $2 >> $LOG
echo $PRE Arg3: $3 >> $LOG
echo $PRE Arg4: $4 >> $LOG
echo $PRE Arg5: $5 >> $LOG
echo $PRE Arg6: $6 >> $LOG
echo $PRE Arg7: $7 >> $LOG
echo $PRE Arg8: $8 >> $LOG
echo $PRE Arg9: $9 >> $LOG
git status >> $LOG
unset PRE
set >> $LOG
echo --------------------------------------------- >> $LOG
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".
#
# https://git-scm.com/docs/githooks
# This hook is invoked by git commit right after preparing the default log message, and before the editor is started.
#
# It takes one to three parameters. The first is the name of the file that contains the commit log message. The second is the source of the commit message, and can be: message (if a -m or -F option was given); template (if a -t option was given or the configuration option commit.template is set); merge (if the commit is a merge or a .git/MERGE_MSG file exists); squash (if a .git/SQUASH_MSG file exists); or commit, followed by a commit SHA-1 (if a -c, -C or --amend option was given).
#
# If the exit status is non-zero, git commit will abort.
#
# The purpose of the hook is to edit the message file in place, and it is not suppressed by the --no-verify option. A non-zero exit means a failure of the hook and aborts the commit. It should not be used as replacement for pre-commit hook.
#
# The sample prepare-commit-msg hook that comes with Git removes the help message found in the commented portion of the commit template.
ORIG_MSG="$1"
SOURCE="$2" # message, template, merge, squash, commit
SHA="$3"
