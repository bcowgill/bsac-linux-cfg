Notes from Emacs Lisp Info tutorial

	'(this is a "quoted" list)
	(quote hello)
	nil === ()

	a-variable ;; symbol for a variable
	(set 'a-variable 42) ;; bind the variable symbol to a value
	(setq a-variable 43) ;; setq allows multiple definitions and omits the ' prefix
	(setq trees '(pine fir oak maple)
		herbivores '(gazelle antelope zebra))

	a-function ;; symbol for a function
	(a-function) ;; invoke a function
	(defun FUNCTION-NAME (ARGUMENTS…)
		"OPTIONAL-DOCUMENTATION…"               ; Ctrl-h f
		(interactive ARGUMENT-PASSING-INFO)     ; optional
		BODY…)
	(defun                ;; begin a function definition
		multiply-by-seven ;; symbol to bind the function definition to
		(number)          ;; arguments passed to function
		"Multiply NUMBER by seven." ;; help/documentation for function
		;; omitted optional key binding
		(* 7 number)      ;; instructions to perform for function
	)
	(multiply-by-seven 7)

	(+ 2 2) ;; symbolic function as operator
	(+ 2 fill-column)

	(setq counter 0)                ; Let’s call this the initializer.
	(setq counter (+ counter 1))    ; This is the incrementer.

	(let ((zebra 'stripes)   ; let list defines local variables
		(tiger 'fierce))
		; body of instructions for the let
		(message "One kind of animal has %s and another is %s."
			zebra tiger))
	zebra ; no longer defined

	(if (> 5 4)                             ; if-part
		(message "5 is greater than 4!"))   ; then-part
	(if (equal 5 5)                         ; if-part
		(message "5 is equal to 5!"))       ; then-part
	(if 0
		(message "0 is not nil so it is TRUE!"))
	(if ""
		(message "'' is not nil so it is TRUE!"))

	(defun is-something (thing)
		"is-something checks if thing is something meaningful like a non empty string, non-zero or non-nil"
		(if thing
			(if (equal "" thing)
				nil
			  (if (equal 0 thing)
			  	  nil
				thing))
			nil)
	)
	(is-something ())
	(is-something nil)
	(is-something 0)
	(is-something "")
	(is-something 4)
	(is-something '(this))
	(is-something '(""))
	(is-something (> 5 4))


	(if (> 4 5)                                   ; if-part
			(message "4 falsely greater than 5!") ; then-part
		(message "4 is not greater than 5!"))     ; else-part

	(defun then (list)
		(concat
			"The function 'then' is syntactic sugar for an if list.\n\n"
			"It allows you to write:\n\n"
			"\t(if LOGICAL-TEST\n"
			"\t\t(then ACTION-WHEN-TRUE)\n"
			"\t\t(else ACTION-WHEN-NIL))"
		)
		list)
	(defun else (list)
		(concat
			"The function 'else' is syntactic sugar for an if else list.\n\n"
			"It allows you to write:\n\n"
			"\t(if LOGICAL-TEST\n"
			"\t\t(then ACTION-WHEN-TRUE)\n"
			"\t\t(else ACTION-WHEN-NIL))"
		)
		list)
	(if (> 5 7)
		(then 42)
		(else 45))

Editor variables/functions (evaluate with Ctrl-x Ctrl-e)
	(message "This message appears in the echo area!")
	(message "%s string parameters are allowed%c%d" "some" 32 42)
	(concat "abc" "def")
	(substring "The quick brown fox jumped." 16 19)
	(number-to-string (+ 2 fill-column))

	fill-column
	(buffer-name)
	(buffer-file-name)
	(current-buffer)
	(other-buffer)
	(switch-to-buffer (other-buffer))
	(switch-to-buffer (other-buffer (current-buffer) t))
	(buffer-size)
	(point)
	(point-min)
	(point-max)
	(mark)
	(- (point) (point-min))
	(mark-whole-buffer)
	(find-tag)
	(beginning-of-buffer)
	(mark-whole-buffer)
	append-to-buffer
	(describe-function 'find-tag)
	(describe-variable 'fill-column)
	(push-mark)
	insert-buffer-substring
	set-buffer
	get-buffer-create
	get-buffer
	copy-to-buffer
	(count-lines start end)
	(forward-line 4)
	(er ase-buf fer) ; warning don't evaluate
	(bufferp buffer) ; check if buffer is a buffer or buffer name
    (line-number-at-pos)

	(save-excursion
		(switch-to-buffer (other-buffer)) ;; WHAT? actually changes buffer
		(exchange-point-and-mark)
	)

	(let (
		(output "")
		(one '(1 2 3))
		(wone '(1 2 3))
		clone
		)
		(setq clone one)
		(if (equal one wone) ; test equality of value
			(setq output "one equal wone")
			(setq output "one not equal wone")
			)
		(if (equal one clone)
			(setq output (concat output ", one equal clone"))
			(setq output (concat output ", one not equal clone"))
			)
		(if (eq one wone) ; test if one object IS another
			(setq output (concat output ", one eq wone"))
			(setq output (concat output ", one not eq wone"))
			)
		(if (eq one clone)
			(setq output (concat output ", one eq clone"))
			(setq output (concat output ", one not eq clone"))
			)
		(if (eq one one)
			(setq output (concat output ", one eq one"))
			(setq output (concat output ", one not eq one"))
			)
		(message output)
	)

	(string< "This" "this")
	(string-lessp "this" "This")
	(string= "this" "this")
	(string-equal "this" "that")

	(defun string> (S1 S2)
		(concat
			"Return t if first arg string is greater than second in lexicographic order.\n"
			"Case is significant.\n"
			"Symbols are also allowed; their print names are used instead."
		)
		(string-lessp S2 S1)
	)

	(defun string>= (S1 S2)
		(concat
			"Return t if first arg string is greater than or equal to second in lexicographic order.\n"
			"Case is significant.\n"
			"Symbols are also allowed; their print names are used instead."
		)
		(if (string= S1 S2)
			t
			(string-lessp S2 S1)
		)
	)

	(defun string<= (S1 S2)
		(concat
			"Return t if first arg string is less than or equal to second in lexicographic order.\n"
			"Case is significant.\n"
			"Symbols are also allowed; their print names are used instead."
		)
		(if (string= S1 S2)
			t
			(string-lessp S1 S2)
		)
	)

	(string> "This" "this")
	(string> "This" "This")
	(string> "this" "This")
	(string>= "This" "this")
	(string>= "This" "This")
	(string>= "this" "This")
	(string<= "This" "this")
	(string<= "This" "This")
	(string<= "this" "This")

etags `find /usr/share/emacs/24.4 -name *.el -o -name *.el.gz`
sudo cp TAGS /usr/share/emacs/24.4

	; go to center point of buffer
	; need a trunc/round/floor function to simplify
	; (let*) allows variable definitions to refer to previously
	; defined values while being defined, unlike (let)
	(let* ((size (- (point-max) (point-min)))
		(center (/ size 2)))
		(push-mark)
		(if (% size 2)
			(goto-char center)
			(goto-char (+ 0.5 center)))
	)

    (not (bufferp "*Messages*"))
	(not (bufferp (get-buffer "*Messages*")))

    (if (not (bufferp buffer))              ; if-part
        (setq buffer (get-buffer buffer)))  ; then-part
    ; better written as:
    (or (bufferp buffer)
		(setq buffer (get-buffer buffer)))

    ; whenever you are saying if .. not, refer rewrite as or

    (and pred1 pred2 ...)

; how big can numbers be?
(let* ((value 100000000000000000) (saved value))
  (setq value (* value 10))
  (> value saved))


    (prefix-numeric-value arg) ; use with (interactive "P") to convert to number

    (save-excursion BODY)   ; save current buffer, mark and point and restore after BODY completes
	(save-current-buffer BODY) ; save/restore current buffer, but not mark or point
    (save-restriction BODY) ; save current narrowing and restore after BODY completes
	(let (deactivate-mark) BODY) ; save deactivate mark and restore after BODY (not saved by save-excursion)

    ; if used together do in this order:
    (save-excursion (save-restriction ...))

    (let (deactivate-mark) (save-excursion (save-restriction ...)))

(count-lines 1 (point))
(line-number-at-pos)

(defun myfun ()
	   (save-restriction
			(widen)
			(save-excursion
				(let ((string
					(buffer-substring-no-properties (point-min) (+ 60 (point-min)))))
					(message "%s" string)
				)
			)))
(myfun)
