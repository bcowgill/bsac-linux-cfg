Python programming language quick reference

https://www.python.org/downloads/
Tutorial http://docs.python.org/2.7/tutorial/
IDE PyScripter code.google.com/p/pyscripter
General Index https://docs.python.org/3/genindex.html
Language Reference https://docs.python.org/3/reference/index.html
Standard Library Reference https://docs.python.org/3/library/index.html

Command Arguments
=================

TODO

Basic Syntax
============

; optional at end of line
, can be used on LHS of assignment:  a,b = b,a
'' "" quotes for strings
: and at lest one white space indent instead of {} to indicate scope of functions and control statements
  python community uses 4 spaces by convention

a=b  # reference copy
import copy; a=copy.copy(b)  # shallow copy
import copy; a=copy.deepcopy(b)  # deep copy

Comments
========

# a single line comment

Keywords
========

and as assert break class continue def del
elif else except exec finally for from global
if import in is lambda not or pass
print raise return try while with yield

Control Statements
==================

if condition :
    print 'something'

if condition :
    print 'something'
else :
    print 'otherwise'

if condition :
    print 'something'
elif condition2 :
    print 'second case'
else :
    print 'otherwise'

initialise
while condition :
  print 'something',
  increment

# do ... while/until
initialise
while True :
  print 'something'
  if condition :
    break;
  increment

for var in 1, 2, 3 :
  print 'something', var

for var in range(start, stop, step) :
  print 'something', var

Operators
=========

Arithmetic: + - * ** / // %
  // = ifloordiv
Relational: > < >= <= != <> ==
Assignment: += -= *= /=
Logical: and or not
Shift / Bitwise: & | ^ ~ << >>
Membership: in, not in
Identity: is, is not

Print
=====

print formatted or unformatted

print var
print "message"
print "%s" % "message"
print "%d" % var
print "message ", var
print "message %d" % var
print "message %d %s" % (var, string)
print var,   # does not print a newline afterward

Integer Number Formats
%b Binary (v3)
%c Unicode character
%d Decimal integer
%i Decimal integer
%o octal integer
%x Hexadecimal integer
%X Uppercase Hexadecimal integer
%n Locale formatted integer (v3)
%u ???

Float and Integer Formats
%e Exponent notation precision 6
%E Uppercase Exponent notation precision 6
%f Fixed point notation precision 6
%F Uppercase Fixed point notation precision 6 (INF, NAN)
%g General format precision 6
%G Uppercase General format precision 6
%n Locale based General Format (v3)
%% Fixed point percentage notation (v3)
%r ???

String Formats %s
all format letters  https://docs.python.org/3/library/string.html#formatspec

Types
=====

Everything is stored as an object.
Variables are always references.

var=42    # assign a label to a value
type(var) # gets type of the var
del var   # var is gone now
id(var)   # memory address of var

Number Types
Int     42 0b1011 #<binary 034 #<octal 0x10 #<hex
Float   1.23 1.2e-4
Complex 1.2j 23+2j  1.2e-2 + 2.3j
Long    42L

Non-number Types
NoneType None
Str  'string'  "string"
Bool True False
Byte

Data Structure Types
List [1,2,3] list([1,2,3]) range(0,10,2)  L[0] L[-1] L[0:2] L[2:5:2] len(L)
 - ordered set of mutable heterogeneous dynamic extensible objects
Tuple (1,2,3) tuple([1,2,3]) tuple(range(0,10,2)) T[0] T[-1] T[2:5:2] len(L)
 - ordered set of immutable heterogeneous objects
Dictionary { 1: 'one', 'bat': 42}  D[1] = 'ONE' del(D[1])
 - unordered set of key value pairs
Set
Collection

List len(L) L.append(val) L.insert(idx, val) del(L[0]) L.count(val) L.extend(list) L.index(val) L.pop() L.remove(val) L.reverse() L.sort(fn)
help(list)
Tuple len(T) T.count(val) T.index(val)
Dictionary D.clear() D.copy() #<shallow D.keys() D.values()

I/O
===

input(prompt) - read any type of value and store as is - even functions like id(a) or exit() !! like an eval
raw_input(prompt) - reads any type of value and stores as string
a=float(raw_input('Some number? '))
a=bool(raw_input('<Enter>=False True=anything else ?'))

Functions
=========

Built In functions
https://docs.python.org/3/library/functions.html

__builtins__ namespace:
abs() delattr() hash() memoryview() set()
all() dict() help() min() setattr()
any() dir() hex() next() slice()
ascii() divmod() id() object() sorted()
bin() enumerate() input() oct() staticmethod()
bool() eval() int() open() str()
breakpoint() exec() isinstance() ord() sum()
bytearray() filter() issubclass() pow() super()
bytes() float() iter() print() tuple()
callable() format() len() property() type()
chr() frozenset() list() range() vars()
classmethod() getattr() locals() repr() zip()
compile() globals() map() reversed() __import__()
complex() hasattr() max() round()
'apply', 'basestring',  'buffer',  'cmp', 'coerce',  'copyright', 'credits',
'execfile', 'exit', 'file', 'intern', 'license',  'quit', 'raw_input', 'reduce',
'reload', 'unichr', 'unicode', 'xrange'

interpreter functions:
breakpoint()
compile() __import__() reload()
eval() input()
exec() execfile()
intern()
exit()  quit()

introspection functions:
dir() id() hash() len()
isinstance() issubclass() callable() type()
globals() vars() locals() hasattr() getattr()
memoryview() repr()
help()

object manipulation functions:
hasattr() getattr() delattr() setattr() super() property()

function manipulation functions:
classmethod() staticmethod() apply()

iterable functions:
len() any() all() min() max() sum()
filter() map() reversed() reduce() zip()
iter() next() enumerate() sorted()
range() xrange()
cmp()

constructor functions:
object() bool() int() long() float() complex() str() bytes()
list() bytearray() tuple() set() dict() frozenset()
slice() memoryview() buffer() unicode()
enumerate()
reversed()
classmethod() staticmethod() super() property() type()
basestring()
file()

conversion functions:
hex() bin() oct() chr() ord() unichr() bytearray() format() repr() coerce()

mathematics functions:
abs() cmp() min() max() round() divmod() pow() sum() complex()

I/O functions:
raw_input() input() open() print() file()

v3 functions?:
ascii() breakpoint()

User Defined Functions:
=======================

def functioncall():
  print 'something'

functioncall()

def sample(x, y):
  print x,y

sample(10, 20)

def flip(x, y):
  return y, x

a,b = flip(12, 20)

def point(x=0, y=0):
  return [x,y]

origin = point()

def args(*x): # multiple values passed in as a tuple called x
  print x

args(1)
args(1,2) ...

Anonyous functions
==================

label = lambda signature : expression

res = lambda x,y: x + y

res(1,2)

Modules
=======

Separate namespace for functions and data.
Python modules have .py extension must be names as valid python identifiers
(i.e. this_file.py not this-file.py)

import module1, module2,...
import module as name
from module import *
from module import specific1, specific2,...
from module import specific as name

sys.path contains the python module search path
help('modules') shows all the modules that are available
help('modules spam') search for modules whose descriptions match spam
dir() shows which modules are currently imported
dir(math)  shows which members are present within a module

PYTHONPATH environment variable inserts in front of the module search path
sys.path.append('./lib') # add to end of search path
sys.path.insert(1, './lib') # add to start of search path

module.__name__ the name of the module
module.__file__ gives the file path for the module
print module.__doc__ prints the documentation for the module
__name__ shows __main__ as the name of the main program module

Some built in modules:
os
sys
math
  math.pi

Packages
========

Combines multiple modules into a folder.
PyPi python package index portal gives access to many packages developed by others.
https://pypi.python.org/pypi

__init__.py file in the folder which initialises the package.
should import the modules of the package and export them along with any data.
create a source python file (compile.py or build.py) which imports the package.
when you run that source the module will be compiled to .pyc files
you can then distribute the .pyc files without the .py source if you like.

pip command for installing packages.
pip list
pip install package
pip show package
pip uninstall package
