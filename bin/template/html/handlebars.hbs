<!-- Sample Handlebars template 
http://handlebarsjs.com/ -->

<script id="entry-template" type="text/x-handlebars-template">
  <div class="entry">
    <h1>{{title}}</h1>
    <div class="body">
      {{{body_html}}}
    </div>
  </div>
</script>

<!--
in javascript compile the template for use.

var source   = $("#entry-template").html();
var template = Handlebars.compile(source);

var context = {title: "My New Post", body_html: "<b>This is my first post!</b>"};
var html    = template(context);

-->

<h1>Comments</h1>

<div id="comments">
  {{#each comments}}
  <h2><a href="/posts/{{../permalink}}#{{id}}">{{title}}</a></h2>
  <div>{{body}}</div>
  {{/each}}
</div>

<!-- an html comment will be in the output -->
{{! a handlebars comment that will not be in the output }}
{{!-- commenting out some handlebars code must use the double dash type of comment <b>{{thing}}</b> --}}
<div class="entry">
  {{!-- comments -- only output this author names if an author exists --}}
  {{#if author}}
    <h1>{{firstName}} {{lastName}}</h1>
  {{/if}}
</div>

<!--

{{ result will be html escaped}}
{{{ result will NOT be html escaped }}}
{{~ result will have template whitespace removed on left side}}
{{result will have template whitespace removed on right side ~}}
{{object.attribute}}
{{articles.[10].[#comments]}} -- for properties which are not valid identifiers

<p>{{./name}} or {{this/name}} or {{this.name}}</p> name conflict resolution

prevent escaping with Handlebars.SafeString

Handlebars.registerHelper('link', function(text, url) {
  text = Handlebars.Utils.escapeExpression(text);
  url  = Handlebars.Utils.escapeExpression(url);

  var result = '<a href="' + url + '">' + text + '</a>';

  return new Handlebars.SafeString(result);
});

invoke with this:
{{link "hard coded text" url}}
{{link text="hard coded text" url=story.url}}

nested helpers
{{outer (inner param) param2}} -- outer helper called with result of inner helper of param as first param, param2 as second param

Lists of items using a block

template
{{#list people}}{{firstName}} {{lastName}}{{/list}}

context object
{
  people: [
    {firstName: "Yehuda", lastName: "Katz"},
    {firstName: "Carl", lastName: "Lerche"},
    {firstName: "Alan", lastName: "Johnson"}
  ]
}

helper:

Handlebars.registerHelper('list', function(items, options) {
  var out = "<ul>";

  for(var i=0, l=items.length; i<l; i++) {
    out = out + "<li>" + options.fn(items[i]) + "</li>";
  }

  return out + "</ul>";
});

built in helpers
#if / #else
#unless
#each / #else
#with / #else

raw-helper allows outputting things that look like handlebars templates
{{{{raw-helper}}}}
     {{bar}}
{{{{/raw-helper}}}}

partials
Handlebars.registerPartial('myPartial', '{{name}}')

calling the partial in a template

{{> myPartial }}

dynamically selecting partial using whichPartial function
{{> (whichPartial) }}

dynamically selecting a partial from a simple variable
{{> (lookup . 'myVariable') }}

invoke a partial with a new context
{{> myPartial myOtherContext }}

Custom data can be passed to partials through hash parameters.
{{> myPartial parameter=value }}

This is particularly useful for exposing data from parent contexts to the partial:
{{> myPartial name=../name }}

TODO API reference
-->
