Script started on 2025-03-13 13:27:45+00:00 [TERM="xterm-256color" TTY="/dev/pts/2" COLUMNS="80" LINES="24"]

$ ./detect.ts
deno 2.2.3

TRACE: isBun:false isDeno:true isTsx:false isNode:false isBrowser:false
dumpable global object [object Window] {
  Deno: {
    internal: Symbol(Deno.internal),
    Process: [class Process],
    run: [Function: run],
    isatty: [Function: isatty],
    writeFileSync: [Function: writeFileSync],
    writeFile: [AsyncFunction: writeFile],
    writeTextFileSync: [Function: writeTextFileSync],
    writeTextFile: [Function: writeTextFile],
    readTextFile: [AsyncFunction: readTextFile],
    readTextFileSync: [Function: readTextFileSync],
    readFile: [AsyncFunction: readFile],
    readFileSync: [Function: readFileSync],
    watchFs: [Function: watchFs],
    chmodSync: [Function: chmodSync],
    chmod: [AsyncFunction: chmod],
    chown: [AsyncFunction: chown],
    chownSync: [Function: chownSync],
    copyFileSync: [Function: copyFileSync],
    cwd: [Function: cwd],
    makeTempDirSync: [Function: makeTempDirSync],
    makeTempDir: [Function: makeTempDir],
    makeTempFileSync: [Function: makeTempFileSync],
    makeTempFile: [Function: makeTempFile],
    cpuUsage: [Function: cpuUsage],
    memoryUsage: [Function: memoryUsage],
    mkdirSync: [Function: mkdirSync],
    mkdir: [AsyncFunction: mkdir],
    chdir: [Function: chdir],
    copyFile: [AsyncFunction: copyFile],
    readDirSync: [Function: readDirSync],
    readDir: [Function: readDir],
    readLinkSync: [Function: readLinkSync],
    readLink: [Function: readLink],
    realPathSync: [Function: realPathSync],
    realPath: [Function: realPath],
    removeSync: [Function: removeSync],
    remove: [AsyncFunction: remove],
    renameSync: [Function: renameSync],
    rename: [AsyncFunction: rename],
    version: { deno: "2.2.3", v8: "13.4.114.11-rusty", typescript: "5.7.3" },
    build: {
      target: "x86_64-unknown-linux-gnu",
      arch: "x86_64",
      os: "linux",
      vendor: "unknown",
      env: "gnu"
    },
    statSync: [Function: statSync],
    lstatSync: [Function: lstatSync],
    stat: [AsyncFunction: stat],
    lstat: [AsyncFunction: lstat],
    truncateSync: [Function: truncateSync],
    truncate: [AsyncFunction: truncate],
    errors: {
      NotFound: [class NotFound extends Error],
      PermissionDenied: [class PermissionDenied extends Error],
      ConnectionRefused: [class ConnectionRefused extends Error],
      ConnectionReset: [class ConnectionReset extends Error],
      ConnectionAborted: [class ConnectionAborted extends Error],
      NotConnected: [class NotConnected extends Error],
      AddrInUse: [class AddrInUse extends Error],
      AddrNotAvailable: [class AddrNotAvailable extends Error],
      BrokenPipe: [class BrokenPipe extends Error],
      AlreadyExists: [class AlreadyExists extends Error],
      InvalidData: [class InvalidData extends Error],
      TimedOut: [class TimedOut extends Error],
      Interrupted: [class Interrupted extends Error],
      WriteZero: [class WriteZero extends Error],
      WouldBlock: [class WouldBlock extends Error],
      UnexpectedEof: [class UnexpectedEof extends Error],
      BadResource: [class BadResource extends Error],
      Http: [class Http extends Error],
      Busy: [class Busy extends Error],
      NotSupported: [class NotSupported extends Error],
      FilesystemLoop: [class FilesystemLoop extends Error],
      IsADirectory: [class IsADirectory extends Error],
      NetworkUnreachable: [class NetworkUnreachable extends Error],
      NotADirectory: [class NotADirectory extends Error],
      NotCapable: [class NotCapable extends Error]
    },
    inspect: [Function: inspect],
    env: {
      get: [Function: getEnv],
      toObject: [Function: toObject],
      set: [Function: setEnv],
      has: [Function: has],
      delete: [Function: deleteEnv]
    },
    exit: [Function: exit],
    execPath: [Function: execPath],
    SeekMode: {
      "0": "Start",
      "1": "Current",
      "2": "End",
      Start: 0,
      Current: 1,
      End: 2
    },
    FsFile: [class FsFile],
    open: [AsyncFunction: open],
    openSync: [Function: openSync],
    create: [Function: create],
    createSync: [Function: createSync],
    stdin: Stdin {},
    stdout: Stdout {},
    stderr: Stderr {},
    connect: [AsyncFunction: connect],
    listen: [Function: listen],
    loadavg: [Function: loadavg],
    connectTls: [AsyncFunction: connectTls],
    listenTls: [Function: listenTls],
    startTls: [AsyncFunction: startTls],
    symlink: [AsyncFunction: symlink],
    symlinkSync: [Function: symlinkSync],
    link: [AsyncFunction: link],
    linkSync: [Function: linkSync],
    permissions: Permissions {},
    Permissions: [class Permissions],
    PermissionStatus: [class PermissionStatus extends EventTarget],
    serveHttp: [Function: serveHttp],
    serve: [Function: serve],
    resolveDns: [AsyncFunction: resolveDns],
    upgradeWebSocket: [Function: upgradeWebSocket],
    utime: [AsyncFunction: utime],
    utimeSync: [Function: utimeSync],
    kill: [Function: kill],
    addSignalListener: [Function: addSignalListener],
    removeSignalListener: [Function: removeSignalListener],
    refTimer: [Function: refTimer],
    unrefTimer: [Function: unrefTimer],
    osRelease: [Function: osRelease],
    osUptime: [Function: osUptime],
    hostname: [Function: hostname],
    systemMemoryInfo: [Function: systemMemoryInfo],
    networkInterfaces: [Function: networkInterfaces],
    consoleSize: [Function: consoleSize],
    gid: [Function: gid],
    uid: [Function: uid],
    Command: [class Command],
    ChildProcess: [class ChildProcess],
    dlopen: [Function: dlopen],
    UnsafeCallback: [class UnsafeCallback],
    UnsafePointer: [class UnsafePointer],
    UnsafePointerView: [class UnsafePointerView],
    UnsafeFnPointer: [class UnsafeFnPointer],
    umask: [Function: umask],
    HttpClient: [class HttpClient],
    createHttpClient: [Function: createHttpClient],
    test: [Function: test],
    bench: [Function: bench],
    lint: { runPlugin: [Function: runPlugin] },
    pid: [Getter/Setter],
    ppid: [Getter/Setter],
    noColor: [Getter/Setter],
    args: [Getter/Setter],
    mainModule: [Getter/Setter],
    [Symbol(Deno.internal)]: {
      Console: [class Console],
      cssToAnsi: [Function: cssToAnsi],
      inspectArgs: [Function: inspectArgs],
      parseCss: [Function: parseCss],
      parseCssColor: [Function: parseCssColor],
      pathFromURL: [Function: pathFromURL],
      resourceForReadableStream: [Function: resourceForReadableStream],
      getIpcPipeRid: [Function (anonymous)],
      getExtraPipeRids: [Function (anonymous)],
      __setupChildProcessIpcChannel: [Function: setupChildProcessIpcChannel],
      resolverSymbol: Symbol(unstableSniResolver),
      serverNameSymbol: Symbol(unstableServerName),
      createTlsKeyResolver: [Function: createTlsKeyResolver],
      getCachedAbortSignal: [Function: getCachedAbortSignal],
      addTrailers: [Function: addTrailers],
      upgradeHttpRaw: [Function: upgradeHttpRaw],
      serveHttpOnListener: [Function: serveHttpOnListener],
      serveHttpOnConnection: [Function: serveHttpOnConnection],
      buildCaseInsensitiveCommaValueFinder: [Function: buildCaseInsensitiveCommaValueFinder],
      formatToCronSchedule: [Function: formatToCronSchedule],
      parseScheduleToString: [Function: parseScheduleToString],
      __initWorkerThreads: [Function (anonymous)],
      node: {
        initialize: [Function: initialize],
        loadCjsModule: [Function: loadCjsModule]
      },
      core: {
        ops: {
          op_base64_encode: [Function: op_base64_encode],
          op_napi_open: [Function: op_napi_open],
          op_set_exit_code: [Function: op_set_exit_code]
        },
        callConsole: [Function (anonymous)],
        console: Object [console] {
          debug: [Function: debug],
          error: [Function: error],
          info: [Function: info],
          log: [Function: log],
          warn: [Function: warn],
          dir: [Function: dir],
          dirxml: [Function: dirxml],
          table: [Function: table],
          trace: [Function: trace],
          group: [Function: group],
          groupCollapsed: [Function: groupCollapsed],
          groupEnd: [Function: groupEnd],
          clear: [Function: clear],
          count: [Function: count],
          countReset: [Function: countReset],
          assert: [Function: assert],
          profile: [Function: profile],
          profileEnd: [Function: profileEnd],
          time: [Function: time],
          timeLog: [Function: timeLog],
          timeEnd: [Function: timeEnd],
          timeStamp: [Function: timeStamp],
          context: [Function: context]
        },
        build: {
          target: "x86_64-unknown-linux-gnu",
          arch: "x86_64",
          os: "linux",
          vendor: "unknown",
          env: "gnu"
        },
        setBuildInfo: [Function: setBuildInfo],
        registerErrorBuilder: [Function: registerErrorBuilder],
        buildCustomError: [Function: buildCustomError],
        registerErrorClass: [Function: registerErrorClass],
        setUpAsyncStub: [Function: setUpAsyncStub],
        hasPromise: [Function: hasPromise],
        promiseIdSymbol: Symbol(Deno.core.internalPromiseId),
        internalRidSymbol: Symbol(Deno.internal.rid),
        internalFdSymbol: Symbol(Deno.internal.fd),
        resources: [Function: resources],
        eventLoopTick: [Function: eventLoopTick],
        BadResource: [class BadResource extends Error],
        BadResourcePrototype: [Error],
        Interrupted: [class Interrupted extends Error],
        InterruptedPrototype: [Error],
        NotCapable: [class NotCapable extends Error],
        NotCapablePrototype: [Error],
        refOpPromise: [Function: refOpPromise],
        unrefOpPromise: [Function: unrefOpPromise],
        setReportExceptionCallback: [Function: setReportExceptionCallback],
        setPromiseHooks: [Function: setPromiseHooks],
        consoleStringify: [Function: consoleStringify],
        close: [Function: op_close],
        tryClose: [Function: op_try_close],
        read: [Function: op_read],
        readAll: [Function: op_read_all],
        write: [Function: op_write],
        writeAll: [Function: op_write_all],
        writeTypeError: [Function: op_write_type_error],
        readSync: [Function: op_read_sync],
        writeSync: [Function: op_write_sync],
        shutdown: [Function: op_shutdown],
        isTerminal: [Function: op_is_terminal],
        print: [Function: print],
        setLeakTracingEnabled: [Function: setLeakTracingEnabled],
        isLeakTracingEnabled: [Function: isLeakTracingEnabled],
        getAllLeakTraces: [Function: getAllLeakTraces],
        getLeakTraceForPromise: [Function: getLeakTraceForPromise],
        setMacrotaskCallback: [Function: setMacrotaskCallback],
        setNextTickCallback: [Function: setNextTickCallback],
        runMicrotasks: [Function: runMicrotasks],
        hasTickScheduled: [Function: hasTickScheduled],
        setHasTickScheduled: [Function: setHasTickScheduled],
        evalContext: [Function: evalContext],
        hostObjectBrand: Symbol(Deno.core.hostObject),
        encode: [Function: encode],
        encodeBinaryString: [Function: encodeBinaryString],
        decode: [Function: decode],
        serialize: [Function: serialize],
        deserialize: [Function: deserialize],
        getPromiseDetails: [Function: getPromiseDetails],
        getProxyDetails: [Function: getProxyDetails],
        isAnyArrayBuffer: [Function: isAnyArrayBuffer],
        isArgumentsObject: [Function: isArgumentsObject],
        isArrayBuffer: [Function: isArrayBuffer],
        isArrayBufferView: [Function: isArrayBufferView],
        isAsyncFunction: [Function: isAsyncFunction],
        isBigIntObject: [Function: isBigIntObject],
        isBooleanObject: [Function: isBooleanObject],
        isBoxedPrimitive: [Function: isBoxedPrimitive],
        isDataView: [Function: isDataView],
        isDate: [Function: isDate],
        isGeneratorFunction: [Function: isGeneratorFunction],
        isGeneratorObject: [Function: isGeneratorObject],
        isMap: [Function: isMap],
        isMapIterator: [Function: isMapIterator],
        isModuleNamespaceObject: [Function: isModuleNamespaceObject],
        isNativeError: [Function: isNativeError],
        isNumberObject: [Function: isNumberObject],
        isPromise: [Function: isPromise],
        isProxy: [Function: isProxy],
        isRegExp: [Function: isRegExp],
        isSet: [Function: isSet],
        isSetIterator: [Function: isSetIterator],
        isSharedArrayBuffer: [Function: isSharedArrayBuffer],
        isStringObject: [Function: isStringObject],
        isSymbolObject: [Function: isSymbolObject],
        isTypedArray: [Function: isTypedArray],
        isWeakMap: [Function: isWeakMap],
        isWeakSet: [Function: isWeakSet],
        memoryUsage: [Function: memoryUsage],
        setWasmStreamingCallback: [Function: setWasmStreamingCallback],
        abortWasmStreaming: [Function: abortWasmStreaming],
        destructureError: [Function: destructureError],
        opNames: [Function: opNames],
        eventLoopHasMoreWork: [Function: eventLoopHasMoreWork],
        byteLength: [Function: byteLength],
        addMainModuleHandler: [Function: addMainModuleHandler],
        setHandledPromiseRejectionHandler: [Function: setHandledPromiseRejectionHandler],
        setUnhandledPromiseRejectionHandler: [Function: setUnhandledPromiseRejectionHandler],
        reportUnhandledException: [Function: reportUnhandledException],
        reportUnhandledPromiseRejection: [Function: reportUnhandledPromiseRejection],
        queueUserTimer: [Function: queueUserTimer],
        queueSystemTimer: [Function: queueSystemTimer],
        queueImmediate: [Function: queueImmediate],
        cancelTimer: [Function: cancelTimer],
        refTimer: [Function: refTimer],
        unrefTimer: [Function: unrefTimer],
        getTimerDepth: [Function: getTimerDepth],
        currentUserCallSite: [Function: currentUserCallSite],
        wrapConsole: [Function: wrapConsole],
        v8Console: Object [console] {
          debug: [Function: debug],
          error: [Function: error],
          info: [Function: info],
          log: [Function: log],
          warn: [Function: warn],
          dir: [Function: dir],
          dirxml: [Function: dirxml],
          table: [Function: table],
          trace: [Function: trace],
          group: [Function: group],
          groupCollapsed: [Function: groupCollapsed],
          groupEnd: [Function: groupEnd],
          clear: [Function: clear],
          count: [Function: count],
          countReset: [Function: countReset],
          assert: [Function: assert],
          profile: [Function: profile],
          profileEnd: [Function: profileEnd],
          time: [Function: time],
          timeLog: [Function: timeLog],
          timeEnd: [Function: timeEnd],
          timeStamp: [Function: timeStamp],
          context: [Function: context]
        },
        propReadOnly: [Function: propReadOnly],
        propWritable: [Function: propWritable],
        propNonEnumerable: [Function: propNonEnumerable],
        propGetterOnly: [Function: propGetterOnly],
        propWritableLazyLoaded: [Function: propWritableLazyLoaded],
        propNonEnumerableLazyLoaded: [Function: propNonEnumerableLazyLoaded],
        createLazyLoader: [Function: createLazyLoader],
        createCancelHandle: [Function: createCancelHandle],
        getAsyncContext: [Function: getContinuationPreservedEmbedderData],
        setAsyncContext: [Function: setContinuationPreservedEmbedderData],
        scopeAsyncContext: [Function: scopeAsyncContext],
        AsyncVariable: [class AsyncVariable]
      },
      getBitmapData: [Function: getBitmapData]
    }
  },
  EventSource: [class EventSource extends EventTarget],
  alert: [Function: alert],
  atob: [Function: atob],
  btoa: [Function: btoa],
  caches: CacheStorage {},
  clearInterval: [Function: clearInterval],
  clearTimeout: [Function: clearTimeout],
  close: [Function: windowClose],
  closed: false,
  confirm: [Function: confirm],
  createImageBitmap: [Function: createImageBitmap],
  crypto: Crypto { subtle: SubtleCrypto {} },
  fetch: [Function: fetch],
  localStorage: Storage { length: 0 },
  name: "",
  navigator: Navigator {
    hardwareConcurrency: 8,
    userAgent: "Deno/2.2.3",
    language: "en-US",
    languages: [ "en-US" ]
  },
  onbeforeunload: null,
  onerror: null,
  onload: null,
  onunhandledrejection: null,
  onunload: null,
  performance: Performance { timeOrigin: 1741872469726.3833 },
  process: EventEmitter [process] {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      removeListener: [Function (anonymous)]
    },
    _eventsCount: 2,
    _maxListeners: undefined,
    argv: [ [Getter], [Getter] ],
    chdir: [Function: chdir],
    config: {
      target_defaults: { default_configuration: "Release" },
      variables: { llvm_version: "0.0", enable_lto: "false" }
    },
    cpuUsage: [Function (anonymous)],
    cwd: [Function: cwd],
    env: {
      OLDPWD: "/home/me/dell/home/me/bin",
      LANG: "en_US.UTF-8",
      MAIL: "/var/mail/me",
      PWD: "/home/me/dell/home/me/bin/template/typescript/react-tools-ts",
      LESSOPEN: "| /usr/bin/lesspipe %s",
      USER: "me",
      _: "./detect.ts",
      PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin",
      LESSCLOSE: "/usr/bin/lesspipe %s %s",
      SHELL: "/bin/bash",
      SHLVL: "2",
      XDG_DATA_DIRS: "/usr/share/gnome:/usr/local/share:/usr/share:/var/lib/snapd/desktop",
      TERM: "xterm-256color",
      HOME: "/home/me",
      LOGNAME: "me",
      LS_COLORS: "rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:"
    },
    execArgv: [],
    exit: [Function: exit],
    abort: [Function: abort],
    reallyExit: [Function (anonymous)],
    _exiting: false,
    mainModule: undefined,
    nextTick: [Function: nextTick],
    dlopen: [Function: dlopen],
    setSourceMapsEnabled: [Function (anonymous)],
    hrtime: [Function: hrtime] { bigint: [Function (anonymous)] },
    _kill: [Function: _kill],
    kill: [Function: kill],
    memoryUsage: [Function: memoryUsage] { rss: [Function (anonymous)] },
    stderr: Writable {
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: true,
        defaultEncoding: "utf8",
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      _write: [Function: write],
      _destroy: [Function: destroy],
      _events: [Object: null prototype] {
        close: [Function: bound onceWrapper] {
          listener: [Function (anonymous)]
        }
      },
      _eventsCount: 1,
      _maxListeners: undefined,
      fd: 2,
      destroySoon: [Function (anonymous)],
      _isStdio: true,
      columns: [Getter/Setter],
      rows: [Getter],
      isTTY: [Getter/Setter],
      getWindowSize: [Function: value],
      cursorTo: [Function (anonymous)],
      moveCursor: [Function (anonymous)],
      clearLine: [Function (anonymous)],
      clearScreenDown: [Function (anonymous)],
      [Symbol(kCapture)]: false
    },
    stdin: <ref *1> ReadStream {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 0,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: null,
        ended: false,
        endEmitted: false,
        reading: false,
        constructed: true,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: "utf8",
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: null
      },
      _events: [Object: null prototype] {
        end: [Function: _onReadableStreamEnd],
        close: [Function (anonymous)]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: "utf8",
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      allowHalfOpen: false,
      server: null,
      _server: null,
      _peername: undefined,
      _sockname: undefined,
      _pendingData: null,
      _pendingEncoding: "",
      _host: null,
      _parent: null,
      _needsSockInitWorkaround: false,
      autoSelectFamilyAttemptedAddresses: undefined,
      setTimeout: [Function: setStreamTimeout],
      connecting: false,
      isRaw: [Getter],
      isTTY: [Getter],
      fd: 0,
      _isRawMode: false,
      setRawMode: [Function (anonymous)],
      [Symbol(kCapture)]: false,
      [Symbol(asyncIdSymbol)]: 2,
      [Symbol(kHandle)]: TTY {
        provider: 35,
        asyncId: 2,
        reading: undefined,
        destroyed: false,
        writeQueueSize: 0,
        bytesRead: 0,
        bytesWritten: 0,
        onread: [Function: onStreamRead],
        [Symbol(kStreamBaseField)]: Stdin {},
        [Symbol(ownerSymbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    stdout: Writable {
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: true,
        defaultEncoding: "utf8",
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      _write: [Function: write],
      _destroy: [Function: destroy],
      _events: [Object: null prototype] {
        close: [Function: bound onceWrapper] {
          listener: [Function (anonymous)]
        }
      },
      _eventsCount: 1,
      _maxListeners: undefined,
      fd: 1,
      destroySoon: [Function (anonymous)],
      _isStdio: true,
      columns: [Getter/Setter],
      rows: [Getter],
      isTTY: [Getter/Setter],
      getWindowSize: [Function: value],
      cursorTo: [Function (anonymous)],
      moveCursor: [Function (anonymous)],
      clearLine: [Function (anonymous)],
      clearScreenDown: [Function (anonymous)],
      [Symbol(kCapture)]: false
    },
    version: "v20.11.1",
    versions: {
      node: "20.11.1",
      uv: "1.43.0",
      zlib: "1.2.11",
      brotli: "1.0.9",
      ares: "1.18.1",
      modules: "108",
      nghttp2: "1.47.0",
      napi: "8",
      llhttp: "6.0.10",
      openssl: "3.0.7+quic",
      cldr: "41.0",
      icu: "71.1",
      tz: "2022b",
      unicode: "14.0",
      ngtcp2: "0.8.1",
      nghttp3: "0.7.0",
      deno: "2.2.3",
      v8: "13.4.114.11-rusty",
      typescript: "5.7.3"
    },
    emitWarning: [Function: emitWarning],
    binding: [Function (anonymous)],
    umask: [Function (anonymous)],
    getgid: [Function: getgid],
    getuid: [Function: getuid],
    getegid: [Function: getegid],
    geteuid: [Function: geteuid],
    getBuiltinModule: [Function: getBuiltinModule],
    _eval: undefined,
    uptime: [Function (anonymous)],
    features: { inspector: false },
    noDeprecation: false,
    [Symbol(kCapture)]: false
  },
  prompt: [Function: prompt],
  queueMicrotask: [Function: queueMicrotask],
  reportError: [Function: reportError],
  self: "CYCLIC REF: [object Window]",
  sessionStorage: Storage { length: 0 },
  setInterval: [Function: setInterval],
  setTimeout: [Function: setTimeout],
  structuredClone: [Function: structuredClone]
}
real global Window {}
process EventEmitter [process] {
  _events: [Object: null prototype] {
    newListener: [Function (anonymous)],
    removeListener: [Function (anonymous)]
  },
  _eventsCount: 2,
  _maxListeners: undefined,
  argv: [ [Getter], [Getter] ],
  chdir: [Function: chdir],
  config: {
    target_defaults: { default_configuration: "Release" },
    variables: { llvm_version: "0.0", enable_lto: "false" }
  },
  cpuUsage: [Function (anonymous)],
  cwd: [Function: cwd],
  env: {
    XDG_DATA_DIRS: "/usr/share/gnome:/usr/local/share:/usr/share:/var/lib/snapd/desktop",
    LESSOPEN: "| /usr/bin/lesspipe %s",
    HOME: "/home/me",
    SHELL: "/bin/bash",
    LANG: "en_US.UTF-8",
    LESSCLOSE: "/usr/bin/lesspipe %s %s",
    MAIL: "/var/mail/me",
    LOGNAME: "me",
    LS_COLORS: "rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:",
    TERM: "xterm-256color",
    USER: "me",
    SHLVL: "2",
    _: "./detect.ts",
    PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin",
    PWD: "/home/me/dell/home/me/bin/template/typescript/react-tools-ts",
    OLDPWD: "/home/me/dell/home/me/bin"
  },
  execArgv: [],
  exit: [Function: exit],
  abort: [Function: abort],
  reallyExit: [Function (anonymous)],
  _exiting: false,
  mainModule: undefined,
  nextTick: [Function: nextTick],
  dlopen: [Function: dlopen],
  setSourceMapsEnabled: [Function (anonymous)],
  hrtime: [Function: hrtime] { bigint: [Function (anonymous)] },
  _kill: [Function: _kill],
  kill: [Function: kill],
  memoryUsage: [Function: memoryUsage] { rss: [Function (anonymous)] },
  stderr: Writable {
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: true,
      defaultEncoding: "utf8",
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    _write: [Function: write],
    _destroy: [Function: destroy],
    _events: [Object: null prototype] {
      close: [Function: bound onceWrapper] { listener: [Function (anonymous)] }
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    fd: 2,
    destroySoon: [Function (anonymous)],
    _isStdio: true,
    columns: [Getter/Setter],
    rows: [Getter],
    isTTY: [Getter/Setter],
    getWindowSize: [Function: value],
    cursorTo: [Function (anonymous)],
    moveCursor: [Function (anonymous)],
    clearLine: [Function (anonymous)],
    clearScreenDown: [Function (anonymous)],
    [Symbol(kCapture)]: false
  },
  stdin: <ref *1> ReadStream {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 0,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      constructed: true,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: true,
      destroyed: false,
      errored: null,
      closed: false,
      closeEmitted: false,
      defaultEncoding: "utf8",
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      dataEmitted: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    _events: [Object: null prototype] {
      end: [Function: _onReadableStreamEnd],
      close: [Function (anonymous)]
    },
    _eventsCount: 2,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: "utf8",
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    allowHalfOpen: false,
    server: null,
    _server: null,
    _peername: undefined,
    _sockname: undefined,
    _pendingData: null,
    _pendingEncoding: "",
    _host: null,
    _parent: null,
    _needsSockInitWorkaround: false,
    autoSelectFamilyAttemptedAddresses: undefined,
    setTimeout: [Function: setStreamTimeout],
    connecting: false,
    isRaw: [Getter],
    isTTY: [Getter],
    fd: 0,
    _isRawMode: false,
    setRawMode: [Function (anonymous)],
    [Symbol(kCapture)]: false,
    [Symbol(asyncIdSymbol)]: 2,
    [Symbol(kHandle)]: TTY {
      provider: 35,
      asyncId: 2,
      reading: undefined,
      destroyed: false,
      writeQueueSize: 0,
      bytesRead: 0,
      bytesWritten: 0,
      onread: [Function: onStreamRead],
      [Symbol(kStreamBaseField)]: Stdin {},
      [Symbol(ownerSymbol)]: [Circular *1]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  stdout: Writable {
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: true,
      defaultEncoding: "utf8",
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    _write: [Function: write],
    _destroy: [Function: destroy],
    _events: [Object: null prototype] {
      close: [Function: bound onceWrapper] { listener: [Function (anonymous)] }
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    fd: 1,
    destroySoon: [Function (anonymous)],
    _isStdio: true,
    columns: [Getter/Setter],
    rows: [Getter],
    isTTY: [Getter/Setter],
    getWindowSize: [Function: value],
    cursorTo: [Function (anonymous)],
    moveCursor: [Function (anonymous)],
    clearLine: [Function (anonymous)],
    clearScreenDown: [Function (anonymous)],
    [Symbol(kCapture)]: false
  },
  version: "v20.11.1",
  versions: {
    node: "20.11.1",
    uv: "1.43.0",
    zlib: "1.2.11",
    brotli: "1.0.9",
    ares: "1.18.1",
    modules: "108",
    nghttp2: "1.47.0",
    napi: "8",
    llhttp: "6.0.10",
    openssl: "3.0.7+quic",
    cldr: "41.0",
    icu: "71.1",
    tz: "2022b",
    unicode: "14.0",
    ngtcp2: "0.8.1",
    nghttp3: "0.7.0",
    deno: "2.2.3",
    v8: "13.4.114.11-rusty",
    typescript: "5.7.3"
  },
  emitWarning: [Function: emitWarning],
  binding: [Function (anonymous)],
  umask: [Function (anonymous)],
  getgid: [Function: getgid],
  getuid: [Function: getuid],
  getegid: [Function: getegid],
  geteuid: [Function: geteuid],
  getBuiltinModule: [Function: getBuiltinModule],
  _eval: undefined,
  uptime: [Function (anonymous)],
  features: { inspector: false },
  noDeprecation: false,
  [Symbol(kCapture)]: false
}

Script done on 2025-03-13 13:27:56+00:00 [COMMAND_EXIT_CODE="0"]
