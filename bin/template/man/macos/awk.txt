AWK(1)                                                                                        AWK(1)



NNAAMMEE
       awk - pattern-directed scanning and processing language

SSYYNNOOPPSSIISS
       aawwkk [ --FF _f_s ] [ --vv _v_a_r_=_v_a_l_u_e ] [ _'_p_r_o_g_' | --ff _p_r_o_g_f_i_l_e ] [ _f_i_l_e _._._.  ]

DDEESSCCRRIIPPTTIIOONN
       _A_w_k  scans  each input _f_i_l_e for lines that match any of a set of patterns specified literally
       in _p_r_o_g or in one or more files specified as --ff _p_r_o_g_f_i_l_e.  With each pattern there can be  an
       associated  action  that  will  be performed when a line of a _f_i_l_e matches the pattern.  Each
       line is matched against the pattern portion of every pattern-action statement; the associated
       action is performed for each matched pattern.  The file name -- means the standard input.  Any
       _f_i_l_e of the form _v_a_r_=_v_a_l_u_e is treated as an assignment, not a filename, and  is  executed  at
       the  time  it  would  have  been  opened  if  it  were a filename.  The option --vv followed by
       _v_a_r_=_v_a_l_u_e is an assignment to be done before _p_r_o_g is executed; any number of --vv  options  may
       be  present.  The --FF _f_s option defines the input field separator to be the regular expression
       _f_s.

       An input line is normally made up of fields separated by  white  space,  or  by  the  regular
       expression  FFSS.   The fields are denoted $$11, $$22, ..., while $$00 refers to the entire line.  If
       FFSS is null, the input line is split into one field per character.

       A pattern-action statement has the form:

              _p_a_t_t_e_r_n {{ _a_c_t_i_o_n }}

       A missing {{ _a_c_t_i_o_n }} means print the line; a missing pattern always matches.   Pattern-action
       statements are separated by newlines or semicolons.

       An action is a sequence of statements.  A statement can be one of the following:

              if( _e_x_p_r_e_s_s_i_o_n ) _s_t_a_t_e_m_e_n_t [ else _s_t_a_t_e_m_e_n_t ]
              while( _e_x_p_r_e_s_s_i_o_n ) _s_t_a_t_e_m_e_n_t
              for( _e_x_p_r_e_s_s_i_o_n ; _e_x_p_r_e_s_s_i_o_n ; _e_x_p_r_e_s_s_i_o_n ) _s_t_a_t_e_m_e_n_t
              for( _v_a_r in _a_r_r_a_y ) _s_t_a_t_e_m_e_n_t
              do _s_t_a_t_e_m_e_n_t while( _e_x_p_r_e_s_s_i_o_n )
              break
              continue
              { [ _s_t_a_t_e_m_e_n_t _._._. ] }
              _e_x_p_r_e_s_s_i_o_n              # commonly _v_a_r _= _e_x_p_r_e_s_s_i_o_n
              print [ _e_x_p_r_e_s_s_i_o_n_-_l_i_s_t ] [ > _e_x_p_r_e_s_s_i_o_n ]
              printf _f_o_r_m_a_t [ , _e_x_p_r_e_s_s_i_o_n_-_l_i_s_t ] [ > _e_x_p_r_e_s_s_i_o_n ]
              return [ _e_x_p_r_e_s_s_i_o_n ]
              next                    # skip remaining patterns on this input line
              nextfile                # skip rest of this file, open next, start at top
              delete _a_r_r_a_y[ _e_x_p_r_e_s_s_i_o_n ]# delete an array element
              delete _a_r_r_a_y            # delete all elements of array
              exit [ _e_x_p_r_e_s_s_i_o_n ]     # exit immediately; status is _e_x_p_r_e_s_s_i_o_n

       Statements  are terminated by semicolons, newlines or right braces.  An empty _e_x_p_r_e_s_s_i_o_n_-_l_i_s_t
       stands for $$00.  String constants are quoted " ", with the usual C escapes recognized  within.
       Expressions  take  on string or numeric values as appropriate, and are built using the opera-
       tors ++ -- ** // %% ^^ (exponentiation), and concatenation (indicated by white space).  The  opera-
       tors  !!  ++++ ---- ++== --== **== //== %%== ^^== >> >>== << <<== ==== !!== ??:: are also available in expressions.  Vari-
       ables may be scalars, array elements (denoted _x[[_i]]) or fields.  Variables are initialized  to
       the  null  string.   Array subscripts may be any string, not necessarily numeric; this allows
       for a form of associative memory.  Multiple subscripts such as  [[ii,,jj,,kk]]  are  permitted;  the
       constituents are concatenated, separated by the value of SSUUBBSSEEPP.

       The pprriinntt statement prints its arguments on the standard output (or on a file if >> _f_i_l_e or >>>>
       _f_i_l_e is present or on a pipe if || _c_m_d is present), separated by the current output field sep-
       arator,  and terminated by the output record separator.  _f_i_l_e and _c_m_d may be literal names or
       parenthesized expressions; identical string values in different statements  denote  the  same
       open  file.   The  pprriinnttff  statement formats its expression list according to the _f_o_r_m_a_t (see
       _p_r_i_n_t_f(3)).  The built-in function cclloossee((_e_x_p_r)) closes the file or pipe  _e_x_p_r.   The  built-in
       function fffflluusshh((_e_x_p_r)) flushes any buffered output for the file or pipe _e_x_p_r.

       The  mathematical functions aattaann22, ccooss, eexxpp, lloogg, ssiinn, and ssqqrrtt are built in.  Other built-in
       functions:

       lleennggtthh the length of its argument taken as a string, number of elements in an  array  for  an
              array argument, or length of $$00 if no argument.

       rraanndd   random number on [0,1).

       ssrraanndd  sets seed for rraanndd and returns the previous seed.

       iinntt    truncates to an integer value.

       ssuubbssttrr((_s,, _m [,, _n]))
              the _n-character substring of _s that begins at position _m counted from 1.  If no _n, use
              the rest of the string.

       iinnddeexx((_s,, _t))
              the position in _s where the string _t occurs, or 0 if it does not.

       mmaattcchh((_s,, _r))
              the position in _s where the regular expression _r occurs, or 0 if  it  does  not.   The
              variables RRSSTTAARRTT and RRLLEENNGGTTHH are set to the position and length of the matched string.

       sspplliitt((_s,, _a [,, _f_s]))
              splits the string _s into array elements _a[[11]], _a[[22]], ..., _a[[_n]],  and  returns  _n.   The
              separation is done with the regular expression _f_s or with the field separator FFSS if _f_s
              is not given.  An empty string as field separator splits the  string  into  one  array
              element per character.

       ssuubb((_r,, _t [, _s]))
              substitutes  _t  for  the first occurrence of the regular expression _r in the string _s.
              If _s is not given, $$00 is used.

       ggssuubb((_r,, _t [, _s]))
              same as ssuubb except that all occurrences of the regular expression  are  replaced;  ssuubb
              and ggssuubb return the number of replacements.

       sspprriinnttff((_f_m_t,, _e_x_p_r,, _._._.))
              the  string resulting from formatting _e_x_p_r _._._.  according to the _p_r_i_n_t_f(3) format _f_m_t.

       ssyysstteemm((_c_m_d))
              executes _c_m_d and returns its exit status. This will be -1 upon error, _c_m_d's exit  sta-
              tus upon a normal exit, 256 + _s_i_g upon death-by-signal, where _s_i_g is the number of the
              murdering signal, or 512 + _s_i_g if there was a core dump.

       ttoolloowweerr((_s_t_r))
              returns a copy of _s_t_r with all upper-case characters translated to their corresponding
              lower-case equivalents.

       ttoouuppppeerr((_s_t_r))
              returns a copy of _s_t_r with all lower-case characters translated to their corresponding
              upper-case equivalents.

       The ``function'' ggeettlliinnee sets $$00 to the next input record from the current input  file;  ggeett--
       lliinnee  <<  _f_i_l_e  sets  $$00  to  the  next  record from _f_i_l_e.  ggeettlliinnee _x sets variable _x instead.
       Finally, _c_m_d || ggeettlliinnee pipes the output of _c_m_d into ggeettlliinnee; each call of ggeettlliinnee returns the
       next  line of output from _c_m_d.  In all cases, ggeettlliinnee returns 1 for a successful input, 0 for
       end of file, and -1 for an error.

       Patterns are arbitrary Boolean combinations (with !! |||| &&&&) of regular expressions  and  rela-
       tional  expressions.   Regular  expressions are as defined in _r_e___f_o_r_m_a_t(7).  Isolated regular
       expressions in a pattern apply to the entire line.  Regular expressions  may  also  occur  in
       relational expressions, using the operators ~~ and !!~~.  //_r_e// is a constant regular expression;
       any string (constant or variable) may be used as a regular expression, except in the position
       of an isolated regular expression in a pattern.

       A  pattern may consist of two patterns separated by a comma; in this case, the action is per-
       formed for all lines from an occurrence of the first pattern though an occurrence of the sec-
       ond.

       A relational expression is one of the following:

              _e_x_p_r_e_s_s_i_o_n _m_a_t_c_h_o_p _r_e_g_u_l_a_r_-_e_x_p_r_e_s_s_i_o_n
              _e_x_p_r_e_s_s_i_o_n _r_e_l_o_p _e_x_p_r_e_s_s_i_o_n
              _e_x_p_r_e_s_s_i_o_n iinn _a_r_r_a_y_-_n_a_m_e
              ((_e_x_p_r,,_e_x_p_r_,_._._.)) iinn _a_r_r_a_y_-_n_a_m_e

       where  a  _r_e_l_o_p  is  any  of  the  six  relational  operators in C, and a _m_a_t_c_h_o_p is either ~~
       (matches) or !!~~ (does not match).  A conditional is an arithmetic  expression,  a  relational
       expression, or a Boolean combination of these.

       The special patterns BBEEGGIINN and EENNDD may be used to capture control before the first input line
       is read and after the last.  BBEEGGIINN and EENNDD do not combine  with  other  patterns.   They  may
       appear multiple times in a program and execute in the order they are read by _a_w_k.

       Variable names with special meanings:

       AARRGGCC   argument count, assignable.

       AARRGGVV   argument array, assignable; non-null members are taken as filenames.

       CCOONNVVFFMMTT
              conversion format used when converting numbers (default %%..66gg).

       EENNVVIIRROONN
              array of environment variables; subscripts are names.

       FFIILLEENNAAMMEE
              the name of the current input file.

       FFNNRR    ordinal number of the current record in the current file.

       FFSS     regular expression used to separate fields; also settable by option --FF_f_s.

       NNFF     number of fields in the current record.

       NNRR     ordinal number of the current record.

       OOFFMMTT   output format for numbers (default %%..66gg).

       OOFFSS    output field separator (default space).

       OORRSS    output record separator (default newline).

       RRLLEENNGGTTHH
              the length of a string matched by mmaattcchh.

       RRSS     input record separator (default newline).  If empty, blank lines separate records.  If
              more than one character long, RRSS is treated as a regular expression, and  records  are
              separated by text matching the expression.

       RRSSTTAARRTT the start position of a string matched by mmaattcchh.

       SSUUBBSSEEPP separates multiple subscripts (default 034).

       Functions may be defined (at the position of a pattern-action statement) thus:

              ffuunnccttiioonn ffoooo((aa,, bb,, cc)) {{ ......;; rreettuurrnn xx }}

       Parameters  are  passed  by  value if scalar and by reference if array name; functions may be
       called recursively.  Parameters are local to the function; all other  variables  are  global.
       Thus  local  variables  may be created by providing excess parameters in the function defini-
       tion.

EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS
       If PPOOSSIIXXLLYY__CCOORRRREECCTT is set in the environment, then _a_w_k follows the POSIX rules  for  ssuubb  and
       ggssuubb with respect to consecutive backslashes and ampersands.

EEXXAAMMPPLLEESS
       length($0) > 72
              Print lines longer than 72 characters.

       { print $2, $1 }
              Print first two fields in opposite order.

       BEGIN { FS = ",[ \t]*|[ \t]+" }
             { print $2, $1 }
              Same, with input fields separated by comma and/or spaces and tabs.

            { s += $1 }
       END  { print "sum is", s, " average is", s/NR }
              Add up first column, print sum and average.

       /start/, /stop/
              Print all lines between start/stop pairs.

       BEGIN     {    # Simulate echo(1)
            for (i = 1; i < ARGC; i++) printf "%s ", ARGV[i]
            printf "\n"
            exit }

SSEEEE AALLSSOO
       _g_r_e_p(1), _l_e_x(1), _s_e_d(1)
       A.  V.  Aho, B. W. Kernighan, P. J. Weinberger, _T_h_e _A_W_K _P_r_o_g_r_a_m_m_i_n_g _L_a_n_g_u_a_g_e, Addison-Wesley,
       1988.  ISBN 0-201-07981-X.

BBUUGGSS
       There are no explicit conversions between numbers and strings.  To force an expression to  be
       treated  as a number add 0 to it; to force it to be treated as a string concatenate "" to it.

       The scope rules for variables in functions are a botch; the syntax is worse.

       Only eight-bit characters sets are handled correctly.



                                                                                              AWK(1)
