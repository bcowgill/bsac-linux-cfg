
FIND(1)                   BSD General Commands Manual                  FIND(1)

NNAAMMEE
     ffiinndd -- walk a file hierarchy

SSYYNNOOPPSSIISS
     ffiinndd [--HH | --LL | --PP] [--EEXXddssxx] [--ff _p_a_t_h] _p_a_t_h _._._. [_e_x_p_r_e_s_s_i_o_n]
     ffiinndd [--HH | --LL | --PP] [--EEXXddssxx] --ff _p_a_t_h [_p_a_t_h _._._.] [_e_x_p_r_e_s_s_i_o_n]

DDEESSCCRRIIPPTTIIOONN
     The ffiinndd utility recursively descends the directory tree for each _p_a_t_h listed, evaluating an
     _e_x_p_r_e_s_s_i_o_n (composed of the ``primaries'' and ``operands'' listed below) in terms of each file
     in the tree.

     The options are as follows:

     --EE      Interpret regular expressions followed by --rreeggeexx and --iirreeggeexx primaries as extended
             (modern) regular expressions rather than basic regular expressions (BRE's).  The
             re_format(7) manual page fully describes both formats.

     --HH      Cause the file information and file type (see stat(2)) returned for each symbolic link
             specified on the command line to be those of the file referenced by the link, not the
             link itself.  If the referenced file does not exist, the file information and type will
             be for the link itself.  File information of all symbolic links not on the command line
             is that of the link itself.

     --LL      Cause the file information and file type (see stat(2)) returned for each symbolic link
             to be those of the file referenced by the link, not the link itself.  If the referenced
             file does not exist, the file information and type will be for the link itself.

             This option is equivalent to the deprecated --ffoollllooww primary.

     --PP      Cause the file information and file type (see stat(2)) returned for each symbolic link
             to be those of the link itself.  This is the default.

     --XX      Permit ffiinndd to be safely used in conjunction with xargs(1).  If a file name contains
             any of the delimiting characters used by xargs(1), a diagnostic message is displayed on
             standard error, and the file is skipped.  The delimiting characters include single (``
             ' '') and double (`` " '') quotes, backslash (``\''), space, tab and newline charac-
             ters.

             However, you may wish to consider the --pprriinntt00 primary in conjunction with ``xxaarrggss --00''
             as an effective alternative.

     --dd      Cause ffiinndd to perform a depth-first traversal, i.e., directories are visited in post-
             order and all entries in a directory will be acted on before the directory itself.  By
             default, ffiinndd visits directories in pre-order, i.e., before their contents.  Note, the
             default is _n_o_t a breadth-first traversal.

             This option is equivalent to the --ddeepptthh primary of IEEE Std 1003.1-2001 (``POSIX.1'').
             The --dd option can be useful when ffiinndd is used with cpio(1) to process files that are
             contained in directories with unusual permissions.  It ensures that you have write per-
             mission while you are placing files in a directory, then sets the directory's permis-
             sions as the last thing.

     --ff      Specify a file hierarchy for ffiinndd to traverse.  File hierarchies may also be specified
             as the operands immediately following the options.

     --ss      Cause ffiinndd to traverse the file hierarchies in lexicographical order, i.e., alphabeti-
             cal order within each directory.  Note: `find -s' and `find | sort' may give different
             results.

     --xx      Prevent ffiinndd from descending into directories that have a device number different than
             that of the file from which the descent began.

             This option is equivalent to the deprecated --xxddeevv primary.

PPRRIIMMAARRIIEESS
     All primaries which take a numeric argument allow the number to be preceded by a plus sign
     (``+'') or a minus sign (``-'').  A preceding plus sign means ``more than n'', a preceding
     minus sign means ``less than n'' and neither means ``exactly n''.

     --BBmmiinn _n
             True if the difference between the time of a file's inode creation and the time ffiinndd
             was started, rounded up to the next full minute, is _n minutes.

     --BBnneewweerr _f_i_l_e
             Same as --nneewweerrBBmm.

     --BBttiimmee _n[ssmmhhddww]
             If no units are specified, this primary evaluates to true if the difference between the
             time of a file's inode creation and the time ffiinndd was started, rounded up to the next
             full 24-hour period, is _n 24-hour periods.

             If units are specified, this primary evaluates to true if the difference between the
             time of a file's inode creation and the time ffiinndd was started is exactly _n units.
             Please refer to the --aattiimmee primary description for information on supported time units.

     --aaccll    May be used in conjunction with other primaries to locate files with extended ACLs.
             See acl(3) for more information.

     --aammiinn _n
             True if the difference between the file last access time and the time ffiinndd was started,
             rounded up to the next full minute, is _n minutes.

     --aanneewweerr _f_i_l_e
             Same as --nneewweerraamm.

     --aattiimmee _n[ssmmhhddww]
             If no units are specified, this primary evaluates to true if the difference between the
             file last access time and the time ffiinndd was started, rounded up to the next full
             24-hour period, is _n 24-hour periods.

             If units are specified, this primary evaluates to true if the difference between the
             file last access time and the time ffiinndd was started is exactly _n units.  Possible time
             units are as follows:

             ss       second
             mm       minute (60 seconds)
             hh       hour (60 minutes)
             dd       day (24 hours)
             ww       week (7 days)

             Any number of units may be combined in one --aattiimmee argument, for example, ``-atime
             -1h30m''.  Units are probably only useful when used in conjunction with the ++ or -- mod-
             ifier.

     --ccmmiinn _n
             True if the difference between the time of last change of file status information and
             the time ffiinndd was started, rounded up to the next full minute, is _n minutes.

     --ccnneewweerr _f_i_l_e
             Same as --nneewweerrccmm.

     --ccttiimmee _n[ssmmhhddww]
             If no units are specified, this primary evaluates to true if the difference between the
             time of last change of file status information and the time ffiinndd was started, rounded
             up to the next full 24-hour period, is _n 24-hour periods.

             If units are specified, this primary evaluates to true if the difference between the
             time of last change of file status information and the time ffiinndd was started is exactly
             _n units.  Please refer to the --aattiimmee primary description for information on supported
             time units.

     --dd      Same as ddeepptthh.  GNU find implements this as a primary in mistaken emulation of FreeBSD
             find(1).

     --ddeelleettee
             Delete found files and/or directories.  Always returns true.  This executes from the
             current working directory as ffiinndd recurses down the tree.  It will not attempt to
             delete a filename with a ``_/'' character in its pathname relative to ``_.'' for security
             reasons.  Depth-first traversal processing is implied by this option.  Following sym-
             links is incompatible with this option.

     --ddeepptthh  Always true; same as the --dd option.

     --ddeepptthh _n
             True if the depth of the file relative to the starting point of the traversal is _n.

     --eemmppttyy  True if the current file or directory is empty.

     --eexxeecc _u_t_i_l_i_t_y [_a_r_g_u_m_e_n_t _._._.] ;
             True if the program named _u_t_i_l_i_t_y returns a zero value as its exit status.  Optional
             _a_r_g_u_m_e_n_t_s may be passed to the utility.  The expression must be terminated by a semi-
             colon (``;'').  If you invoke ffiinndd from a shell you may need to quote the semicolon if
             the shell would otherwise treat it as a control operator.  If the string ``{}'' appears
             anywhere in the utility name or the arguments it is replaced by the pathname of the
             current file.  _U_t_i_l_i_t_y will be executed from the directory from which ffiinndd was exe-
             cuted.  _U_t_i_l_i_t_y and _a_r_g_u_m_e_n_t_s are not subject to the further expansion of shell pat-
             terns and constructs.

     --eexxeecc _u_t_i_l_i_t_y [_a_r_g_u_m_e_n_t _._._.] {} +
             Same as --eexxeecc, except that ``{}'' is replaced with as many pathnames as possible for
             each invocation of _u_t_i_l_i_t_y.  This behaviour is similar to that of xargs(1).

     --eexxeeccddiirr _u_t_i_l_i_t_y [_a_r_g_u_m_e_n_t _._._.] ;
             The --eexxeeccddiirr primary is identical to the --eexxeecc primary with the exception that _u_t_i_l_i_t_y
             will be executed from the directory that holds the current file.  The filename substi-
             tuted for the string ``{}'' is not qualified.

     --eexxeeccddiirr _u_t_i_l_i_t_y [_a_r_g_u_m_e_n_t _._._.] {} +
             Same as --eexxeeccddiirr, except that ``{}'' is replaced with as many pathnames as possible for
             each invocation of _u_t_i_l_i_t_y.  This behaviour is similar to that of xargs(1).

     --ffllaaggss [--|++]_f_l_a_g_s,_n_o_t_f_l_a_g_s
             The flags are specified using symbolic names (see chflags(1)).  Those with the "no"
             prefix (except "nodump") are said to be _n_o_t_f_l_a_g_s.  Flags in _f_l_a_g_s are checked to be
             set, and flags in _n_o_t_f_l_a_g_s are checked to be not set.  Note that this is different from
             --ppeerrmm, which only allows the user to specify mode bits that are set.

             If flags are preceded by a dash (``-''), this primary evaluates to true if at least all
             of the bits in _f_l_a_g_s and none of the bits in _n_o_t_f_l_a_g_s are set in the file's flags bits.
             If flags are preceded by a plus (``+''), this primary evaluates to true if any of the
             bits in _f_l_a_g_s is set in the file's flags bits, or any of the bits in _n_o_t_f_l_a_g_s is not
             set in the file's flags bits.  Otherwise, this primary evaluates to true if the bits in
             _f_l_a_g_s exactly match the file's flags bits, and none of the _f_l_a_g_s bits match those of
             _n_o_t_f_l_a_g_s.

     --ffssttyyppee _t_y_p_e
             True if the file is contained in a file system of type _t_y_p_e.  The lsvfs(1) command can
             be used to find out the types of file systems that are available on the system.  In
             addition, there are two pseudo-types, ``local'' and ``rdonly''.  The former matches any
             file system physically mounted on the system where the ffiinndd is being executed and the
             latter matches any file system which is mounted read-only.

     --ggiidd _g_n_a_m_e
             The same thing as _-_g_r_o_u_p _g_n_a_m_e for compatibility with GNU find.  GNU find imposes a
             restriction that _g_n_a_m_e is numeric, while find(1) does not.

     --ggrroouupp _g_n_a_m_e
             True if the file belongs to the group _g_n_a_m_e.  If _g_n_a_m_e is numeric and there is no such
             group name, then _g_n_a_m_e is treated as a group ID.

     --iiggnnoorree__rreeaaddddiirr__rraaccee
             This option is for GNU find compatibility and is ignored.

     --iillnnaammee _p_a_t_t_e_r_n
             Like --llnnaammee, but the match is case insensitive.  This is a GNU find extension.

     --iinnaammee _p_a_t_t_e_r_n
             Like --nnaammee, but the match is case insensitive.

     --iinnuumm _n
             True if the file has inode number _n.

     --iippaatthh _p_a_t_t_e_r_n
             Like --ppaatthh, but the match is case insensitive.

     --iirreeggeexx _p_a_t_t_e_r_n
             Like --rreeggeexx, but the match is case insensitive.

     --iiwwhhoolleennaammee _p_a_t_t_e_r_n
             The same thing as --iippaatthh, for GNU find compatibility.

     --lliinnkkss _n
             True if the file has _n links.

     --llnnaammee _p_a_t_t_e_r_n
             Like --nnaammee, but the contents of the symbolic link are matched instead of the file name.
             Note that this only matches broken symbolic links if symbolic links are being followed.
             This is a GNU find extension.

     --llss     This primary always evaluates to true.  The following information for the current file
             is written to standard output: its inode number, size in 512-byte blocks, file permis-
             sions, number of hard links, owner, group, size in bytes, last modification time, and
             pathname.  If the file is a block or character special file, the device number will be
             displayed instead of the size in bytes.  If the file is a symbolic link, the pathname
             of the linked-to file will be displayed preceded by ``->''.  The format is identical to
             that produced by ``llss --ddggiillss''.

     --mmaaxxddeepptthh _n
             Always true; descend at most _n directory levels below the command line arguments.  If
             any --mmaaxxddeepptthh primary is specified, it applies to the entire expression even if it
             would not normally be evaluated.  ``--mmaaxxddeepptthh 0'' limits the whole search to the com-
             mand line arguments.

     --mmiinnddeepptthh _n
             Always true; do not apply any tests or actions at levels less than _n.  If any --mmiinnddeepptthh
             primary is specified, it applies to the entire expression even if it would not normally
             be evaluated.  ``--mmiinnddeepptthh 1'' processes all but the command line arguments.

     --mmmmiinn _n
             True if the difference between the file last modification time and the time ffiinndd was
             started, rounded up to the next full minute, is _n minutes.

     --mmnneewweerr _f_i_l_e
             Same as --nneewweerr.

     --mmoouunntt  The same thing as --xxddeevv, for GNU find compatibility.

     --mmttiimmee _n[ssmmhhddww]
             If no units are specified, this primary evaluates to true if the difference between the
             file last modification time and the time ffiinndd was started, rounded up to the next full
             24-hour period, is _n 24-hour periods.

             If units are specified, this primary evaluates to true if the difference between the
             file last modification time and the time ffiinndd was started is exactly _n units.  Please
             refer to the --aattiimmee primary description for information on supported time units.

     --nnaammee _p_a_t_t_e_r_n
             True if the last component of the pathname being examined matches _p_a_t_t_e_r_n.  Special
             shell pattern matching characters (``['', ``]'', ``*'', and ``?'') may be used as part
             of _p_a_t_t_e_r_n.  These characters may be matched explicitly by escaping them with a back-
             slash (``\'').

     --nneewweerr _f_i_l_e
             True if the current file has a more recent last modification time than _f_i_l_e.

     --nneewweerr_X_Y _f_i_l_e
             True if the current file has a more recent last access time (_X=aa), inode creation time
             (_X=BB), change time (_X=cc), or modification time (_X=mm) than the last access time (_Y=aa),
             inode creation time (_Y=BB), change time (_Y=cc), or modification time (_Y=mm) of _f_i_l_e.  In
             addition, if _Y=tt, then _f_i_l_e is instead interpreted as a direct date specification of
             the form understood by cvs(1).  Note that --nneewweerrmmmm is equivalent to --nneewweerr.

     --nnooggrroouupp
             True if the file belongs to an unknown group.

     --nnooiiggnnoorree__rreeaaddddiirr__rraaccee
             This option is for GNU find compatibility and is ignored.

     --nnoolleeaaff
             This option is for GNU find compatibility.  In GNU find it disables an optimization not
             relevant to find(1), so it is ignored.

     --nnoouusseerr
             True if the file belongs to an unknown user.

     --ookk _u_t_i_l_i_t_y [_a_r_g_u_m_e_n_t _._._.] ;
             The --ookk primary is identical to the --eexxeecc primary with the exception that ffiinndd requests
             user affirmation for the execution of the _u_t_i_l_i_t_y by printing a message to the terminal
             and reading a response.  If the response is not affirmative (`y' in the ``POSIX''
             locale), the command is not executed and the value of the --ookk expression is false.

     --ookkddiirr _u_t_i_l_i_t_y [_a_r_g_u_m_e_n_t _._._.] ;
             The --ookkddiirr primary is identical to the --eexxeeccddiirr primary with the same exception as
             described for the --ookk primary.

     --ppaatthh _p_a_t_t_e_r_n
             True if the pathname being examined matches _p_a_t_t_e_r_n.  Special shell pattern matching
             characters (``['', ``]'', ``*'', and ``?'') may be used as part of _p_a_t_t_e_r_n.  These
             characters may be matched explicitly by escaping them with a backslash (``\'').
             Slashes (``/'') are treated as normal characters and do not have to be matched explic-
             itly.

     --ppeerrmm [--|++]_m_o_d_e
             The _m_o_d_e may be either symbolic (see chmod(1)) or an octal number.  If the _m_o_d_e is sym-
             bolic, a starting value of zero is assumed and the _m_o_d_e sets or clears permissions
             without regard to the process' file mode creation mask.  If the _m_o_d_e is octal, only
             bits 07777 (S_ISUID | S_ISGID | S_ISTXT | S_IRWXU | S_IRWXG | S_IRWXO) of the file's
             mode bits participate in the comparison.  If the _m_o_d_e is preceded by a dash (``-''),
             this primary evaluates to true if at least all of the bits in the _m_o_d_e are set in the
             file's mode bits.  If the _m_o_d_e is preceded by a plus (``+''), this primary evaluates to
             true if any of the bits in the _m_o_d_e are set in the file's mode bits.  Otherwise, this
             primary evaluates to true if the bits in the _m_o_d_e exactly match the file's mode bits.
             Note, the first character of a symbolic mode may not be a dash (``-'').

     --pprriinntt  This primary always evaluates to true.  It prints the pathname of the current file to
             standard output.  If none of --eexxeecc, --llss, --pprriinntt, --pprriinntt00, or --ookk is specified, the
             given expression shall be effectively replaced by (( _g_i_v_e_n _e_x_p_r_e_s_s_i_o_n )) --pprriinntt.

     --pprriinntt00
             This primary always evaluates to true.  It prints the pathname of the current file to
             standard output, followed by an ASCII NUL character (character code 0).

     --pprruunnee  This primary always evaluates to true.  It causes ffiinndd to not descend into the current
             file.  Note, the --pprruunnee primary has no effect if the --dd option was specified.

     --rreeggeexx _p_a_t_t_e_r_n
             True if the whole path of the file matches _p_a_t_t_e_r_n using regular expression.  To match
             a file named ``_._/_f_o_o_/_x_y_z_z_y'', you can use the regular expression ``.*/[xyz]*'' or
             ``.*/foo/.*'', but not ``xyzzy'' or ``/foo/''.

     --ssaammeeffiillee _n_a_m_e
             True if the file is a hard link to _n_a_m_e.  If the command option --LL is specified, it is
             also true if the file is a symbolic link and points to _n_a_m_e.

     --ssiizzee _n[cckkMMGGTTPP]
             True if the file's size, rounded up, in 512-byte blocks is _n.  If _n is followed by a cc,
             then the primary is true if the file's size is _n bytes (characters).  Similarly if _n is
             followed by a scale indicator then the file's size is compared to _n scaled as:

             kk       kilobytes (1024 bytes)
             MM       megabytes (1024 kilobytes)
             GG       gigabytes (1024 megabytes)
             TT       terabytes (1024 gigabytes)
             PP       petabytes (1024 terabytes)

     --ttyyppee _t
             True if the file is of the specified type.  Possible file types are as follows:

             bb       block special
             cc       character special
             dd       directory
             ff       regular file
             ll       symbolic link
             pp       FIFO
             ss       socket

     --uuiidd _u_n_a_m_e
             The same thing as _-_u_s_e_r _u_n_a_m_e for compatibility with GNU find.  GNU find imposes a
             restriction that _u_n_a_m_e is numeric, while find(1) does not.

     --uusseerr _u_n_a_m_e
             True if the file belongs to the user _u_n_a_m_e.  If _u_n_a_m_e is numeric and there is no such
             user name, then _u_n_a_m_e is treated as a user ID.

     --wwhhoolleennaammee _p_a_t_t_e_r_n
             The same thing as --ppaatthh, for GNU find compatibility.

     --xxaattttrr  True if the file has any extended attributes.

     --xxaattttrrnnaammee _n_a_m_e
             True if the file has an extended attribute with the specified _n_a_m_e.

OOPPEERRAATTOORRSS
     The primaries may be combined using the following operators.  The operators are listed in order
     of decreasing precedence.

     (( _e_x_p_r_e_s_s_i_o_n ))
             This evaluates to true if the parenthesized expression evaluates to true.

     !! _e_x_p_r_e_s_s_i_o_n
     --nnoott _e_x_p_r_e_s_s_i_o_n
             This is the unary NOT operator.  It evaluates to true if the expression is false.

     --ffaallssee  Always false.
     --ttrruuee   Always true.

     _e_x_p_r_e_s_s_i_o_n --aanndd _e_x_p_r_e_s_s_i_o_n
     _e_x_p_r_e_s_s_i_o_n _e_x_p_r_e_s_s_i_o_n
             The --aanndd operator is the logical AND operator.  As it is implied by the juxtaposition
             of two expressions it does not have to be specified.  The expression evaluates to true
             if both expressions are true.  The second expression is not evaluated if the first
             expression is false.

     _e_x_p_r_e_s_s_i_o_n --oorr _e_x_p_r_e_s_s_i_o_n
             The --oorr operator is the logical OR operator.  The expression evaluates to true if
             either the first or the second expression is true.  The second expression is not evalu-
             ated if the first expression is true.

     All operands and primaries must be separate arguments to ffiinndd.  Primaries which themselves take
     arguments expect each argument to be a separate argument to ffiinndd.

EENNVVIIRROONNMMEENNTT
     The LANG, LC_ALL, LC_COLLATE, LC_CTYPE, LC_MESSAGES and LC_TIME environment variables affect
     the execution of the ffiinndd utility as described in environ(7).

EEXXAAMMPPLLEESS
     The following examples are shown as given to the shell:

     find / \! -name "*.c" -print
             Print out a list of all the files whose names do not end in _._c.

     find / -newer ttt -user wnj -print
             Print out a list of all the files owned by user ``wnj'' that are newer than the file
             _t_t_t.

     find / \! \( -newer ttt -user wnj \) -print
             Print out a list of all the files which are not both newer than _t_t_t and owned by
             ``wnj''.

     find / \( -newer ttt -or -user wnj \) -print
             Print out a list of all the files that are either owned by ``wnj'' or that are newer
             than _t_t_t.

     find / -newerct '1 minute ago' -print
             Print out a list of all the files whose inode change time is more recent than the cur-
             rent time minus one minute.

     find / -type f -exec echo {} \;
             Use the echo(1) command to print out a list of all the files.

     find -L /usr/ports/packages -type l -exec rm -- {} +
             Delete all broken symbolic links in _/_u_s_r_/_p_o_r_t_s_/_p_a_c_k_a_g_e_s.

     find /usr/src -name CVS -prune -o -depth +6 -print
             Find files and directories that are at least seven levels deep in the working directory
             _/_u_s_r_/_s_r_c.

     find /usr/src -name CVS -prune -o -mindepth 7 -print
             Is not equivalent to the previous example, since --pprruunnee is not evaluated below level
             seven.

CCOOMMPPAATTIIBBIILLIITTYY
     The --ffoollllooww primary is deprecated; the --LL option should be used instead.  See the _S_T_A_N_D_A_R_D_S
     section below for details.

SSEEEE AALLSSOO
     chflags(1), chmod(1), cvs(1), locate(1), lsvfs(1), whereis(1), which(1), xargs(1), stat(2),
     acl(3), fts(3), getgrent(3), getpwent(3), strmode(3), re_format(7), symlink(7)

SSTTAANNDDAARRDDSS
     The ffiinndd utility syntax is a superset of the syntax specified by the IEEE Std 1003.1-2001
     (``POSIX.1'') standard.

     All the single character options except --HH and --LL as well as --aammiinn, --aanneewweerr, --ccmmiinn, --ccnneewweerr,
     --ddeelleettee, --eemmppttyy, --ffssttyyppee, --iinnaammee, --iinnuumm, --iirreeggeexx, --llss, --mmaaxxddeepptthh, --mmiinnddeepptthh, --mmmmiinn, --ppaatthh,
     --pprriinntt00, --rreeggeexx and all of the --BB** birthtime related primaries are extensions to IEEE Std
     1003.1-2001 (``POSIX.1'').

     Historically, the --dd, --LL and --xx options were implemented using the primaries --ddeepptthh, --ffoollllooww,
     and --xxddeevv.  These primaries always evaluated to true.  As they were really global variables
     that took effect before the traversal began, some legal expressions could have unexpected
     results.  An example is the expression --pprriinntt --oo --ddeepptthh.  As --pprriinntt always evaluates to true,
     the standard order of evaluation implies that --ddeepptthh would never be evaluated.  This is not the
     case.

     The operator --oorr was implemented as --oo, and the operator --aanndd was implemented as --aa.

     Historic implementations of the --eexxeecc and --ookk primaries did not replace the string ``{}'' in
     the utility name or the utility arguments if it had preceding or following non-whitespace char-
     acters.  This version replaces it no matter where in the utility name or arguments it appears.

     The --EE option was inspired by the equivalent grep(1) and sed(1) options.

HHIISSTTOORRYY
     A ffiinndd command appeared in Version 1 AT&T UNIX.

BBUUGGSS
     The special characters used by ffiinndd are also special characters to many shell programs.  In
     particular, the characters ``*'', ``['', ``]'', ``?'', ``('', ``)'', ``!'', ``\'' and ``;'' may
     have to be escaped from the shell.

     As there is no delimiter separating options and file names or file names and the _e_x_p_r_e_s_s_i_o_n, it
     is difficult to specify files named _-_x_d_e_v or _!.  These problems are handled by the --ff option
     and the getopt(3) ``----'' construct.

     The --ddeelleettee primary does not interact well with other options that cause the file system tree
     traversal options to be changed.

     The --mmiinnddeepptthh and --mmaaxxddeepptthh primaries are actually global options (as documented above).  They
     should probably be replaced by options which look like options.

BSD                           September 28, 2011                           BSD
