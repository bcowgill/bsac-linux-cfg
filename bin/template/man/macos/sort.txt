
SORT(1)                   BSD General Commands Manual                  SORT(1)

NNAAMMEE
     ssoorrtt -- sort or merge records (lines) of text and binary files

SSYYNNOOPPSSIISS
     ssoorrtt [--bbccCCddffgghhiiRRMMmmnnrrssuuVVzz] [--kk _f_i_e_l_d_1[,_f_i_e_l_d_2]] [--SS _m_e_m_s_i_z_e] [--TT _d_i_r] [--tt _c_h_a_r] [--oo _o_u_t_p_u_t]
          [_f_i_l_e _._._.]
     ssoorrtt ----hheellpp
     ssoorrtt ----vveerrssiioonn

DDEESSCCRRIIPPTTIIOONN
     The ssoorrtt utility sorts text and binary files by lines.  A line is a record separated from the
     subsequent record by a newline (default) or NUL '\0' character (-z option).  A record can con-
     tain any printable or unprintable characters.  Comparisons are based on one or more sort keys
     extracted from each line of input, and are performed lexicographically, according to the cur-
     rent locale's collating rules and the specified command-line options that can tune the actual
     sorting behavior.  By default, if keys are not given, ssoorrtt uses entire lines for comparison.

     The command line options are as follows:

     --cc, ----cchheecckk, --CC, ----cchheecckk==ssiilleenntt||qquuiieett
             Check that the single input file is sorted.  If the file is not sorted, ssoorrtt produces
             the appropriate error messages and exits with code 1, otherwise returns 0.  If --CC or
             ----cchheecckk==ssiilleenntt is specified, ssoorrtt produces no output.  This is a "silent" version of
             --cc.

     --mm, ----mmeerrggee
             Merge only.  The input files are assumed to be pre-sorted.  If they are not sorted the
             output order is undefined.

     --oo _o_u_t_p_u_t, ----oouuttppuutt=_o_u_t_p_u_t
             Print the output to the _o_u_t_p_u_t file instead of the standard output.

     --SS _s_i_z_e, ----bbuuffffeerr--ssiizzee=_s_i_z_e
             Use _s_i_z_e for the maximum size of the memory buffer.  Size modifiers %,b,K,M,G,T,P,E,Z,Y
             can be used.  If a memory limit is not explicitly specified, ssoorrtt takes up to about 90%
             of available memory.  If the file size is too big to fit into the memory buffer, the
             temporary disk files are used to perform the sorting.

     --TT _d_i_r, ----tteemmppoorraarryy--ddiirreeccttoorryy=_d_i_r
             Store temporary files in the directory _d_i_r.  The default path is the value of the envi-
             ronment variable TMPDIR or _/_v_a_r_/_t_m_p if TMPDIR is not defined.

     --uu, ----uunniiqquuee
             Unique keys.  Suppress all lines that have a key that is equal to an already processed
             one.  This option, similarly to --ss, implies a stable sort.  If used with --cc or --CC, ssoorrtt
             also checks that there are no lines with duplicate keys.

     --ss      Stable sort.  This option maintains the original record order of records that have an
             equal key.  This is a non-standard feature, but it is widely accepted and used.

     ----vveerrssiioonn
             Print the version and silently exits.

     ----hheellpp  Print the help text and silently exits.

     The following options override the default ordering rules.  When ordering options appear inde-
     pendently of key field specifications, they apply globally to all sort keys.  When attached to
     a specific key (see --kk), the ordering options override all global ordering options for the key
     they are attached to.

     --bb, ----iiggnnoorree--lleeaaddiinngg--bbllaannkkss
             Ignore leading blank characters when comparing lines.

     --dd, ----ddiiccttiioonnaarryy--oorrddeerr
             Consider only blank spaces and alphanumeric characters in comparisons.

     --ff, ----iiggnnoorree--ccaassee
             Convert all lowercase characters to their uppercase equivalent before comparison, that
             is, perform case-independent sorting.

     --gg, ----ggeenneerraall--nnuummeerriicc--ssoorrtt, ----ssoorrtt==ggeenneerraall--nnuummeerriicc
             Sort by general numerical value.  As opposed to --nn, this option handles general float-
             ing points.  It has a more permissive format than that allowed by --nn but it has a sig-
             nificant performance drawback.

     --hh, ----hhuummaann--nnuummeerriicc--ssoorrtt, ----ssoorrtt==hhuummaann--nnuummeerriicc
             Sort by numerical value, but take into account the SI suffix, if present.  Sort first
             by numeric sign (negative, zero, or positive); then by SI suffix (either empty, or `k'
             or `K', or one of `MGTPEZY', in that order); and finally by numeric value.  The SI suf-
             fix must immediately follow the number.  For example, '12345K' sorts before '1M',
             because M is "larger" than K.  This sort option is useful for sorting the output of a
             single invocation of 'df' command with --hh or --HH options (human-readable).

     --ii, ----iiggnnoorree--nnoonnpprriinnttiinngg
             Ignore all non-printable characters.

     --MM, ----mmoonntthh--ssoorrtt, ----ssoorrtt==mmoonntthh
             Sort by month abbreviations.  Unknown strings are considered smaller than the month
             names.

     --nn, ----nnuummeerriicc--ssoorrtt, ----ssoorrtt==nnuummeerriicc
             Sort fields numerically by arithmetic value.  Fields are supposed to have optional
             blanks in the beginning, an optional minus sign, zero or more digits (including decimal
             point and possible thousand separators).

     --RR, ----rraannddoomm--ssoorrtt, ----ssoorrtt==rraannddoomm
             Sort by a random order.  This is a random permutation of the inputs except that the
             equal keys sort together.  It is implemented by hashing the input keys and sorting the
             hash values.  The hash function is chosen randomly.  The hash function is randomized by
             //ddeevv//rraannddoomm content, or by file content if it is specified by ----rraannddoomm--ssoouurrccee.  Even if
             multiple sort fields are specified, the same random hash function is used for all of
             them.

     --rr, ----rreevveerrssee
             Sort in reverse order.

     --VV, ----vveerrssiioonn--ssoorrtt
             Sort version numbers.  The input lines are treated as file names in form PREFIX VERSION
             SUFFIX, where SUFFIX matches the regular expression "(.([A-Za-z~][A-Za-z0-9~]*)?)*".
             The files are compared by their prefixes and versions (leading zeros are ignored in
             version numbers, see example below).  If an input string does not match the pattern,
             then it is compared using the byte compare function.  All string comparisons are per-
             formed in C locale, the locale environment setting is ignored.

             Example:

             $ ls sort* | sort -V

             sort-1.022.tgz

             sort-1.23.tgz

             sort-1.23.1.tgz

             sort-1.024.tgz

             sort-1.024.003.

             sort-1.024.003.tgz

             sort-1.024.07.tgz

             sort-1.024.009.tgz

     The treatment of field separators can be altered using these options:

     --bb, ----iiggnnoorree--lleeaaddiinngg--bbllaannkkss
             Ignore leading blank space when determining the start and end of a restricted sort key
             (see --kk).  If --bb is specified before the first --kk option, it applies globally to all
             key specifications.  Otherwise, --bb can be attached independently to each _f_i_e_l_d argument
             of the key specifications.  --bb.

     --kk _f_i_e_l_d_1[,_f_i_e_l_d_2], ----kkeeyy=_f_i_e_l_d_1[,_f_i_e_l_d_2]
             Define a restricted sort key that has the starting position _f_i_e_l_d_1, and optional ending
             position _f_i_e_l_d_2 of a key field.  The --kk option may be specified multiple times, in
             which case subsequent keys are compared when earlier keys compare equal.  The --kk option
             replaces the obsolete options ++_p_o_s_1 and --_p_o_s_2, but the old notation is also supported.

     --tt _c_h_a_r, ----ffiieelldd--sseeppaarraattoorr=_c_h_a_r
             Use _c_h_a_r as a field separator character.  The initial _c_h_a_r is not considered to be part
             of a field when determining key offsets.  Each occurrence of _c_h_a_r is significant (for
             example, ``_c_h_a_r_c_h_a_r'' delimits an empty field).  If --tt is not specified, the default
             field separator is a sequence of blank space characters, and consecutive blank spaces
             do _n_o_t delimit an empty field, however, the initial blank space _i_s considered part of a
             field when determining key offsets.  To use NUL as field separator, use --tt '\0'.

     --zz, ----zzeerroo--tteerrmmiinnaatteedd
             Use NUL as record separator.  By default, records in the files are supposed to be sepa-
             rated by the newline characters.  With this option, NUL ('\0') is used as a record sep-
             arator character.

     Other options:

     ----bbaattcchh--ssiizzee=_n_u_m
             Specify maximum number of files that can be opened by ssoorrtt at once.  This option
             affects behavior when having many input files or using temporary files.  The default
             value is 16.

     ----ccoommpprreessss--pprrooggrraamm=_P_R_O_G_R_A_M
             Use PROGRAM to compress temporary files.  PROGRAM must compress standard input to stan-
             dard output, when called without arguments.  When called with argument --dd it must
             decompress standard input to standard output.  If PROGRAM fails, ssoorrtt must exit with
             error.  An example of PROGRAM that can be used here is bzip2.

     ----rraannddoomm--ssoouurrccee=_f_i_l_e_n_a_m_e
             In random sort, the file content is used as the source of the 'seed' data for the hash
             function choice.  Two invocations of random sort with the same seed data will use the
             same hash function and will produce the same result if the input is also identical.  By
             default, file //ddeevv//rraannddoomm is used.

     ----ddeebbuugg
             Print some extra information about the sorting process to the standard output.

     ----ppaarraalllleell
             Set the maximum number of execution threads.  Default number equals to the number of
             CPUs.

     ----ffiilleess00--ffrroomm=_f_i_l_e_n_a_m_e
             Take the input file list from the file _f_i_l_e_n_a_m_e.  The file names must be separated by
             NUL (like the output produced by the command "find ... -print0").

     ----rraaddiixxssoorrtt
             Try to use radix sort, if the sort specifications allow.  The radix sort can only be
             used for trivial locales (C and POSIX), and it cannot be used for numeric or month
             sort.  Radix sort is very fast and stable.

     ----mmeerrggeessoorrtt
             Use mergesort.  This is a universal algorithm that can always be used, but it is not
             always the fastest.

     ----qqssoorrtt
             Try to use quick sort, if the sort specifications allow.  This sort algorithm cannot be
             used with --uu and --ss.

     ----hheeaappssoorrtt
             Try to use heap sort, if the sort specifications allow.  This sort algorithm cannot be
             used with --uu and --ss.

     ----mmmmaapp  Try to use file memory mapping system call.  It may increase speed in some cases.

     The following operands are available:

     _f_i_l_e    The pathname of a file to be sorted, merged, or checked.  If no _f_i_l_e operands are spec-
             ified, or if a _f_i_l_e operand is --, the standard input is used.

     A field is defined as a maximal sequence of characters other than the field separator and
     record separator (newline by default).  Initial blank spaces are included in the field unless
     --bb has been specified; the first blank space of a sequence of blank spaces acts as the field
     separator and is included in the field (unless --tt is specified).  For example, all blank spaces
     at the beginning of a line are considered to be part of the first field.

     Fields are specified by the --kk _f_i_e_l_d_1[,_f_i_e_l_d_2] command-line option.  If _f_i_e_l_d_2 is missing, the
     end of the key defaults to the end of the line.

     The arguments _f_i_e_l_d_1 and _f_i_e_l_d_2 have the form _m_._n _(_m_,_n _> _0_) and can be followed by one or more
     of the modifiers bb, dd, ff, ii, nn, gg, MM and rr, which correspond to the options discussed above.
     When bb is specified it applies only to _f_i_e_l_d_1 or _f_i_e_l_d_2 where it is specified while the rest of
     the modifiers apply to the whole key field regardless if they are specified only with _f_i_e_l_d_1 or
     _f_i_e_l_d_2 or both.  A _f_i_e_l_d_1 position specified by _m_._n is interpreted as the _nth character from
     the beginning of the _mth field.  A missing _._n in _f_i_e_l_d_1 means `.1', indicating the first char-
     acter of the _mth field; if the --bb option is in effect, _n is counted from the first non-blank
     character in the _mth field; _m.1b refers to the first non-blank character in the _mth field.  1._n
     refers to the _nth character from the beginning of the line; if _n is greater than the length of
     the line, the field is taken to be empty.

     _nth positions are always counted from the field beginning, even if the field is shorter than
     the number of specified positions.  Thus, the key can really start from a position in a subse-
     quent field.

     A _f_i_e_l_d_2 position specified by _m_._n is interpreted as the _nth character (including separators)
     from the beginning of the _mth field.  A missing _._n indicates the last character of the _mth
     field; _m = 0 designates the end of a line.  Thus the option --kk _v_._x_,_w_._y is synonymous with the
     obsolete option ++_v_-_1_._x_-_1 --_w_-_1_._y; when _y is omitted, --kk _v_._x_,_w is synonymous with ++_v_-_1_._x_-_1 --_w_._0.
     The obsolete ++_p_o_s_1 --_p_o_s_2 option is still supported, except for --_w_._0_b, which has no --kk equiva-
     lent.

EENNVVIIRROONNMMEENNTT
     LC_COLLATE  Locale settings to be used to determine the collation for sorting records.

     LC_CTYPE    Locale settings to be used to case conversion and classification of characters,
                 that is, which characters are considered whitespaces, etc.

     LC_MESSAGES
                 Locale settings that determine the language of output messages that ssoorrtt prints
                 out.

     LC_NUMERIC  Locale settings that determine the number format used in numeric sort.

     LC_TIME     Locale settings that determine the month format used in month sort.

     LC_ALL      Locale settings that override all of the above locale settings.  This environment
                 variable can be used to set all these settings to the same value at once.

     LANG        Used as a last resort to determine different kinds of locale-specific behavior if
                 neither the respective environment variable, nor LC_ALL are set.

     TMPDIR      Path to the directory in which temporary files will be stored.  Note that TMPDIR
                 may be overridden by the --TT option.

     GNUSORT_NUMERIC_COMPATIBILITY
                 If defined --tt will not override the locale numeric symbols, that is, thousand sepa-
                 rators and decimal separators.  By default, if we specify --tt with the same symbol
                 as the thousand separator or decimal point, the symbol will be treated as the field
                 separator.  Older behavior was less definite; the symbol was treated as both field
                 separator and numeric separator, simultaneously.  This environment variable enables
                 the old behavior.

     GNUSORT_COMPATIBLE_BLANKS
                 Use 'space' symbols as field separators (as modern GNU sort does).

FFIILLEESS
     /var/tmp/.bsdsort.PID.*           Temporary files.
     /dev/random                       Default seed file for the random sort.

EEXXIITT SSTTAATTUUSS
     The ssoorrtt utility shall exit with one of the following values:

     0     Successfully sorted the input files or if used with --cc or --CC, the input file already met
           the sorting criteria.
     1     On disorder (or non-uniqueness) with the --cc or --CC options.
     2     An error occurred.

SSEEEE AALLSSOO
     comm(1), join(1), uniq(1)

SSTTAANNDDAARRDDSS
     The ssoorrtt utility is compliant with the IEEE Std 1003.1-2008 (``POSIX.1'') specification.

     The flags [--gghhRRMMSSssTTVVzz] are extensions to the POSIX specification.

     All long options are extensions to the specification, some of them are provided for compatibil-
     ity with GNU versions and some of them are own extensions.

     The old key notations ++_p_o_s_1 and --_p_o_s_2 come from older versions of ssoorrtt and are still supported
     but their use is highly discouraged.

HHIISSTTOORRYY
     A ssoorrtt command first appeared in Version 3 AT&T UNIX.

AAUUTTHHOORRSS
     Gabor Kovesdan <_g_a_b_o_r_@_F_r_e_e_B_S_D_._o_r_g>,

     Oleg Moskalenko <_m_o_m_0_4_0_2_6_7_@_g_m_a_i_l_._c_o_m>

NNOOTTEESS
     This implementation of ssoorrtt has no limits on input line length (other than imposed by available
     memory) or any restrictions on bytes allowed within lines.

     The performance depends highly on locale settings, efficient choice of sort keys and key com-
     plexity.  The fastest sort is with locale C, on whole lines, with option --ss.  In general,
     locale C is the fastest, then single-byte locales follow and multi-byte locales as the slowest
     but the correct collation order is always respected.  As for the key specification, the simpler
     to process the lines the faster the search will be.

     When sorting by arithmetic value, using --nn results in much better performance than --gg so its
     use is encouraged whenever possible.

BSD                             March 19, 2015                             BSD
