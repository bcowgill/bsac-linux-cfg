#!/bin/bash
# https://git-scm.com/docs/githooks
PRE="`date` commit-msg:"
LOG=~/githook.log
echo === $PRE $0 entered ========================= >> $LOG
echo $PRE LOGNAME: $LOGNAME USER: $USER HOME: $HOME >> $LOG
echo $PRE PWD: $PWD >> $LOG
echo $PRE EDITOR: $EDITOR >> $LOG
echo $PRE PATH: $PATH >> $LOG
echo $PRE GIT_DIR: $GIT_DIR >> $LOG
echo $PRE GIT_EDITOR: $GIT_EDITOR >> $LOG
echo $PRE core.hooksPath: `git config core.hooksPath` >> $LOG
if echo $SSH_ASKPASS | grep git-gui > /dev/null; then
	echo $PRE git gui: yes >> $LOG
else
	echo $PRE git gui: no >> $LOG
fi
echo $PRE Arg1 ORIG_MSG: $1 >> $LOG
cat "$1" >> $LOG
echo --------------------------------------------- >> $LOG
git status >> $LOG
echo --------------------------------------------- >> $LOG
echo $PRE git hook logged

#HOOK
#!/bin/bash
# Git hook script to check the commit log message.
# First line must adhere to policy.
# Second line must be blank.
# Go nuts on the remaining lines.
# Filter out any lines starting with '#'
#echo hooks/commit-msg
#echo GIT_PARAMS=$GIT_PARAMS
#echo PARAMS=$*

# support getting params from GIT_PARAMS for husky
function get_params {
	if [ ! -z $1 ]; then
		ORIG_MSG="$1"
	fi
}

ORIG_MSG="$1"
get_params $GIT_PARAMS

grep -vE '^#'  "$ORIG_MSG" | \
perl -ne '
  sub no_unicode
	{
		if ($ENV{SSH_ASKPASS} =~ m{git-gui}xms)
		{
			return 1
		}
		return 0;
	}
	BEGIN
	{
		# suppress wide character in print messages with unicode
		binmode STDOUT, ":utf8";
		binmode STDERR, ":utf8";
		$CHECK = "\N{U+2714}  ";
		$CROSS = "\N{U+2718}  ";
		if (no_unicode()) {
			$CHECK = "";
			$CROSS = "";
		}
		$Q = chr(39); # single quote
		$NO_TICKET = 1;

		$WORDS = 5;    # minimum number of words in message
		$MAX_LEN = 100; # 0 for no length limit

		$PREFIX = "begin, wip, bdd, tests, fixed, resolved, release, hotfix, or review.";
		$PREFIX_RE = qr{(begin|wip|bdd|tests|fixed|resolved|release|hotfix|review)}xms;

		$TIK = $NO_TICKET ? "" : "XYZ-NNNN";
		$TICKET = "a ticket number i.e. $TIK";
		$TICKET_RE = qr{[A-Z]{2,} - \d+ }xms;

		$NIL_RE = qr{((chang|fix|resolv|releas)(e[ds]?|ing)?|review(s|ed|ing)?|a[snt]?|a(re|nd)|th(e(m|[rs]e)?|is|at)|i[st]?|too?|o[fnr])}i;

		@FEELING = qw(
			extraordinary good outstanding champion fine ok
			great hallelulah amen nice capital excellent
			awesome
		);

		my $help = "Description should have at least $WORDS MEANINGFUL words.";
		@REASONS = (
			# Order this list from rude, vague responses first for
			# very short descriptions toward more polite and precise
			# instructions for those who provided more words.
			[ # no words
				"Say what?",
				"No comprendo.",
				"Pardon me?",
				"Watchoo talkin$Q about, Willis?",
				"Throw me a bone here, that tells me nothing.",
				$help,
			],
			[ # 1 word
				"No hablo whatever that was.",
				"You talking to me, punk?",
				"You did what!?",
				"Really? You thought THAT was a good commit description?",
				"Try writing an actual sentence, with a noun, a verb, etc.",
				$help,
			],
			[ # 2 words
				"Explain it to me like I${Q}m a child.",
				"Tell me more, tell me more, like does he have a car?",
				"Tell me about your childhood.",
				"Give me a little more to work with.",
				$help,
			],
			[ # 3 words
				"I think I${Q}m beginning to understand.",
				"A little bit louder now!",
				"It${Q}s beginning to look a lot like Christmas.",
				"Could you describe that change with a few more words?",
				$help,
			],
			[ # 4 words
				"I didn${Q}t think it was possible to do that!",
				"Once more, with feeling.",
				"That actually worked?",
				"Close, but no cigar.",
				"Explain it a little more for me.",
				$help,
			]
		);

		#print qq{TICKET_RE: $TICKET_RE\n};
	}
	sub explain
	{
		my ($reason) = @_;
		warn(qq{\n\n$reason\n\n});
		warn <<"EOM";
[POLICY] Your commit message is not formatted correctly!
Message format must be like:

release $TIK Description of release (for releases)
hotfix $TIK Description of hot fix (for hot fixes to production)
review $TIK Case title (for peer review changes after fixex/resolved)
resolved $TIK Case title (for features)
fixed $TIK Case title (for bugs)
wip $TIK Description of change (for work in process)
bdd $TIK Description of tests (for automation tests in process)
tests $TIK Description of tests (for other tests in process)
begin $TIK Case title (for initial branch creation to begin work)

First letter of Case Title/Description must be capitalised.
Description must have a fair number of words in it.
Second line of message must be blank.
Remaining lines can be as descriptive as you like.

See JIRA Smart commit documentation for more that you can do with this.
https://confluence.atlassian.com/bitbucket/processing-jira-software-issues-with-smart-commit-messages-298979931.html#ProcessingissueswithSmartCommits-multiline
EOM
		exit 2;
	}
	sub fail
	{
		my ($reason) = @_;
		warn(qq{\n\n$CROSS$reason\n});
		exit 1;
	}
	sub choose
	{
		my (@choices) = @_;
		my $choice = int(rand() * scalar(@choices));
		return $choices[$choice];
	}
	sub weighted
	{
		my ($words, $meaningful, @choices) = @_;
		my $num = scalar(@choices);
		my $raChoices = $choices[$words >= $num ? $num - 1 : $words];
		$num = scalar(@$raChoices);
		my $choice = ($words - $meaningful) + int(rand() * $num);
		# print "weight: w:$words, m:$meaningful, n:$num, c:$choice\n";
		$choice = $num - 1 if $choice >= $num;
		return "$CROSS$raChoices->[$choice]";
	}
	sub praise
	{
		my ($message) = @_;
		print qq{$CHECK$message, @{[choose(@FEELING)]}!\n};
	}
	sub sarcasm
	{
		my ($words, $meaningful, $description) = @_;
		return qq{Insufficient description of change:\n\t"$description"\n\n}
			. weighted($words, $meaningful, @REASONS);
	}

	if ($. == 1)
	{
		print "$_";
		$MAX_LEN && (length($_) < $MAX_LEN || fail("First line of commit message (@{[length($_)]} chars) is too long. (<$MAX_LEN) "));

		s{\A $PREFIX_RE \s+ }{}xms || explain("Commit message MUST begin with $PREFIX");
		praise("A work type");

		unless ($NO_TICKET)
		{

			s{\A $TICKET_RE \s*}{}xms || explain("Commit message MUST contain $TICKET");
			praise("A ticket id");
		}
		# print qq{\nNOW: $_ \n};

		my $description = $_;
		chomp($description);
		praise("A filename perhaps") if $description =~ m{\w+\.\w+};
		praise("A directory perhaps") if $description =~ m{\w+/};

		s{([a-z])$Q([a-z])}{$1$2}xmsgi;  # de-contract
		s{[^a-z0-9_-]+}{\ }xmsgi;        # de-punctuate

		m{\A [A-Z]}xms || fail(qq{Description must begin with a capital letter.\n\t"$description"});
		print qq{\nDescription found: $description\n};
		praise("A capital letter");

		my $total_words = scalar(split(/\s+/));
		s{\b $NIL_RE \b \s* }{}xmsgi;     # remove pointless words

		praise("A description of some sort") if $total_words && $total_words <= 3;

		# print "Meaningful Description: $_\n";
		my @words = split(/\s+/);
		scalar(@words) > $WORDS || fail(sarcasm($total_words, scalar(@words), $description));
	}
	elsif ($. == 2)
	{
		m{\A \s* \z}xms || fail("Second line of commit message must be blank.\nGot: [\n$_]\n");
	}
	else
	{
		exit 0;
	}
'
exit $?;
#/HOOK

exit 0
echo "ALL COMMITS PREVENTED"; exit 1 # to prevent all commits
