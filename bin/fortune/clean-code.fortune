Demanding Professionalism in Software Development:

We will not ship shit!
Always be ready to ship.
Have Stable Productivity.
Build Inexpensive Adaptability.
Continuously Improve the code. (The Boy Scout rule)
Have Fearless Competence. (TDD)
Extreme Quality.
QA  Will Find Nothing.
(QA Should Wonder Why they Are There.)
We cover for each other.
Honest Estimates. "I Don't know" or a range of values constantly updated.
We will say "No" when we have to.
We will say "Yes" when we believe it.
We never "Try."
Automate Everything!
Continuous Aggressive Learning. (on your own time)
Mentoring.

Robert C. Martin, youtube
%
Leave the code cleaner than you found it. If we all checked-in our code a little cleaner than when we checked it out, the code simply could not rot.
Clean Code, Robert C. Martin, p14
%
The XIV Commandments of Names:

i Use Intention-Revealing Names
ii Avoid Disinformation
iii Make Meaningful Distinctions
iv Use Pronounceable Names
v Use Searchable Names
vi Avoid Encodings
vii Avoid Mental Mapping
viii Don't Be Cute
ix Pick One Word Per Concept
x Don't Pun
xi Use Solution Domain Names
xii Use Problem Domain Names
xiii Add Meaningful Context
xiv Don't Add Gratuitous Context

Clean Code, Robert C. Martin, p18-29
%
Names: Use Intention-Revealing Names
The name of a variable, function, or class, should answer all the big questions. It should tell you why it exists, what it does, and how it is used. If a name requires a comment, then the name does not reveal its intent.
Clean Code, Robert C. Martin, p18
%
Names: Avoid Disinformation
Clean Code, Robert C. Martin, p19
%
Names: Make Meaningful Distinctions
Don't add meaningless words or numbers to names just to satisfy the compiler.
Clean Code, Robert C. Martin, p20
%
Names: Use Pronounceable Names
Clean Code, Robert C. Martin, p21
%
Names: Use Searchable Names
Single letter names can only be used as local variables inside short methods. The length of a name should correspond to the size of its scope.
Clean Code, Robert C. Martin, p22
%
Names: Avoid Encodings
Hungarian notation or member variable prefixes are no longer needed. Prefer to encode implmentation class names instead of interface class names. i.e. ShapeFactoryImp
Clean Code, Robert C. Martin, p25
%
Names: Avoid Mental Mapping
Classes and objects should have noun or noun phrase names. Avoid words like Manager, Processor, Data or Info. A class name should not be a verb.
Methods should have verb or verb phrase names. Accessors, mutators, and predicates should be named for their value and prefixed with get, set, is, has, can.
Clean Code, Robert C. Martin, p25
%
Names: Don't Be Cute
Choose clarity over entertainment value. Say what you mean. Mean what you say.
Clean Code, Robert C. Martin, p26
%
Names: Pick One Word Per Concept
A consistent lexicon is a great boon to the programmers who must use your code.
Clean Code, Robert C. Martin, p26
%
Names: Don't Pun
Avoid using the same word for two purposes.
Clean Code, Robert C. Martin, p26
%
Names: Use Solution Domain Names
Clean Code, Robert C. Martin, p27
%
Names: Use Problem Domain Names
Clean Code, Robert C. Martin, p27
%
Names: Add Meaningful Context
Add prefixes or suffixes to names as a last resort when necessary to give proper context to a name.
Clean Code, Robert C. Martin, p27
%
Names: Don't Add Gratuitous Context
Shorter names are generally better than longer ones, so long as they are clear. Add no more context to a name than is necessary.
Clean Code, Robert C. Martin, p29
%
Functions should do one thing. They should do it well. They should do it only.
%
Functions should be:

Small!
Have no room for nested structures.
Do One Thing.
Have No Sections.
One Level of Abstraction Per Function.
Read From Top to Bottom: The Stepdown Rule

Clean Code, Robert C. Martin, p31-49
%
Functions:
The first rule of functions is that they should be small.
The second rule of functions is that they should be smaller than that.

Clean Code, Robert C. Martin, p34
%
Functions should be so small they don't have room for nested structures. They should have one or two indention levels at most.
Clean Code, Robert C. Martin, p35
%
Functions that do one thing cannot be reasonably divided into sections.
Clean Code, Robert C. Martin, p36
%
A function is doing more than "one thing" if you can extract another function from it with a name that is not merely a restatement of its implementation.

Clean Code, Robert C. Martin, p36
%
The code should read like a top-down narrative. We want every function to be followed by those at the next level of abstraction so that we can read the program, descending one level of abstraction at a time as we read down the list of functions. I call this The Stepdown Rule.

Clean Code, Robert C. Martin, p37
%
Switch Statements:

Should appear only once.
Should be used to create polymorpic objects.
Should be hidden behind an inheritance relationship so that the rest of the system can't see them.

Clean Code, Robert C. Martin, p38
%
Switch statements should be buried in the basement of an Abstract Factory and never seen.
Clean Code, Robert C. Martin, p38
%
Prefer Exceptions to Returning Error Codes

Returning error codes from command functions is a subtle violation of command query separation.
It promotes commands being used as expressions in the predicates of if statements.

This does not suffer from verb/adjective confusion but does lead to deeply nested structures.
When you return an error code, you create the problem that the caller must deal with the error immediately.

On the other hand, if you use exceptions instead of returned error codes, then the error processing code can be separated from the happy path code and can be simplified.

Clean Code, Robert C. Martin, p46
%
Good Comments:

Legal Comments.
Informative Comments.
Explanation of Intent.
Clarification.
Warning of Consequences.
TODO Comments. (w/date)
Amplification.
Javadocs in Public APIs.

Clean Code, Robert C. Martin, p55
%
Classes:
The first rule of classes is that they should be small.
The second rule of classes is that they should be smaller than that.
Clean Code, Robert C. Martin, p136
%
Classes:
The name of a class should describe what responsibilities it fulfills. In fact, naming is probably the first way of helping determine class size. If we cannot derive a concise name for a class, then it's likely too large. The more ambiguous the class name, the more likely it has too many responsibilities.
Clean Code, Robert C. Martin, p138
%
Classes:
We should be able to write a brief description of the class in about 25 words without using the words "if," "and," "or," or "but."
Clean Code, Robert C. Martin, p138
%
Classes: Single Responsibility Principle:
A class or module should have one, and only one, reason to change. Each small class encapsulates a single responsibility, has a single reason to change, and collaborates with a few others to achieve the desired system behaviors.
Clean Code, Robert C. Martin, p138,140
%
Classes: Cohesion Should be High
Classes should have a small number of instance variables. Each of the methods of a class should manipulate one or more of those variables. In general the more variables a method manipulates the more cohesive that method is to its class. A class in which each variable is used by each method is maximally cohesive.
Clean Code, Robert C. Martin, p140
%
Smelly Comments:

C1: Inappropriate Information
C2: Obsolete Comment
C3: Redundant Comment
C4: Poorly Written Comment
C5: Commented-Out Code

Clean Code, Robert C. Martin, p286
%
Smelly Environments:

E1: Build Requires More Than One Step
E2: Tests Require More Than One Step

Clean Code, Robert C. Martin, p287
%
Smelly Functions:

F1: Too Many Arguments
F2: Output Arguments
F3: Flag Arguments
F4: Dead Functions

Clean Code, Robert C. Martin, p288
%
General Smelliness:

G1: Multiple Languages in One Source File
G2: Obvious Behavior Is Unimplemented
G3: Incorrect Behavior at the Boundaries
G4: Overridden Safeties
G5: Duplication
G6: Code at Wrong Level of Abstraction
G7: Base Classes Depending on Their Derivatives
G8: Too Much Information
G9: Dead Code
G10: Vertical Separation
G11: Inconsistency
G12: Clutter
G13: Artifical Coupling
G14: Feature Envy
G15: Selector Arguments
G16: Obscured Intent
G17: Misplaced Responsibility
G18: Inappropriate Static
G19: Use Explanatory Variables
G20: Function Names Should Say What They Do
G21: Understand the Algorithm
G22: Make Logical Dependencies Physical
G23: Prefer Polymorphism to If/Else or Switch/Case
G24: Follow Standard Convention
G25: Replace Magic Numbers with Named Constants
G26: Be Precise
G27: Structure over Convention
G28: Encapsulate Conditionals
G29: Avoid Negative Conditionals
G30: Functions Should Do One Thing
G31: Hidden Temporal Couplings
G32: Don't Be Arbitrary
G33: Encapsulate Boundary Conditions
G34: Functions Should Descend Only One Level of Abstraction
G35: Keep Configurable Data at High Levels
G36: Avoid Transitive Navigation

Clean Code, Robert C. Martin, p288-307
%
Smelly Java:

J1: Avoid Long Import Lists by Using Wildcards
J2: Don't Inherit Constants
J3: Constants versus Enums

Clean Code, Robert C. Martin, p307
%
Smelly Names:

N1: Choose Descriptive Names
N2: Choose Names at the Appropriate Level of Abstraction
N3: Use Standard Nomenclature Where Possible
N4: Unambiguous Names
N5: Use Long Names for Long Scopes
N6: Avoid Encodings
N7: Names Should Describe Side Effects

Clean Code, Robert C. Martin, p309
%
Smelly Tests:

T1: Insufficient Tests
T2: Use a Coverage Tool!
T3: Don't Skip Trivial Tests
T4: An Ignored Test Is a Question about an Ambiguity
T5: Test Boundary Conditions
T6: Exhaustively Test Near Bugs
T7: Patterns of Failure Are Revealing
T8: Test Coverage Patterns Can Be Revealing
T9: Tests Should Be Fast

Clean Code, Robert C. Martin, p313
%
Don't comment bad code -- rewrite it.

Brian W. Kernighan and P.J. Plaugher
%
Class Design Principles (S.O.L.I.D.)

SRP: The Single Responsibility Principle
OCP: The Open/Closed Principle
LSP: The Liskov Substitution Principle
ISP: The Interface Segregation Principle
DIP: The Dependency Inversion Principle
%
The Single Responsibility Principle

A class should have one, and only one, reason to change.
This does not mean a single function, does not mean what it does.
How many execute level officers have an interest in the class?
%
The Open / Closed Principle

Modules should be open for extension, but closed for modification.

Bertrand Meyer, 1980
%
The Liskov Substitution Principle (Barbara Liskov, 1988)

Derived classes must be usable through the base class interface, without the need for the user to know the difference.

Whenever you violate the substitution principle you will eventually add an if statement to check the type of the object to prevent you from crashing the system.
%
Simple code:

Passes all the tests.
Expresses every idea that we need to express.
Says everything OnceAndOnlyOnce.
Has no superfluous parts.

http://c2.com/cgi/wiki?XpSimplicityRules
%
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!

echo import this | python

