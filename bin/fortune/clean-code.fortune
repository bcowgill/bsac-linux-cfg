Leave the code cleaner than you found it. If we all checked-in our code a little cleaner than when we checked it out, the code simply could not rot.
Clean Code, Robert C. Martin, p14
%
Names: Use Intention-Revealing Names
The name of a variable, function, or class, should answer all the big questions. It should tell you why it exists, what it does, and how it is used. If a name requires a comment, then the name does not reveal its intent.
Clean Code, Robert C. Martin, p18
%
Names: Avoid Disinformation
Clean Code, Robert C. Martin, p19
%
Names: Make Meaningful Distinctions
Clean Code, Robert C. Martin, p20
%
Names: Use Pronounceable Names
Clean Code, Robert C. Martin, p21
%
Names: Avoid Mental Mapping
Clean Code, Robert C. Martin, p25
%
Names: Don't Be Cute
Clean Code, Robert C. Martin, p26
%
Names: Pick One Word Per Concept
Clean Code, Robert C. Martin, p26
%
Names: Don't Pun
Clean Code, Robert C. Martin, p26
%
Names: Use Solution Domain Names
Clean Code, Robert C. Martin, p27
%
Names: Use Problem Domain Names
Clean Code, Robert C. Martin, p27
%
Names: Add Meaningful Context
Clean Code, Robert C. Martin, p27
%
Names: Don't Add Gratuitous Context
Clean Code, Robert C. Martin, p29
%
The XII Commandments of Names:
i: Use Intention-Revealing Names
ii: Avoid Disinformation
iii: Make Meaningful Distinctions
iv: Use Pronounceable Names
v: Avoid Mental Mapping
vi: Don't Be Cute
vii: Pick One Word Per Concept
viii: Don't Pun
ix: Use Solution Domain Names
x: Use Problem Domain Names
xi: Add Meaningful Context
xii: Don't Add Gratuitous Context
Clean Code, Robert C. Martin, p18-29
%
Classes:
The first rule of classes is that they should be small.
The second rule of classes is that they should be smaller than that.
Clean Code, Robert C. Martin, p136
%
Classes:
The name of a class should describe what responsibilities it fulfills. In fact, naming is probably the first way of helping determine class size. If we cannot derive a concise name for a class, then it's likely too large. The more ambiguous the class name, the more likely it has too many responsibilities.
Clean Code, Robert C. Martin, p138
%
Classes:
We should be able to write a brief description of the class in about 25 words without using the words "if," "and," "or," or "but."
Clean Code, Robert C. Martin, p138
%
Classes: Single Responsibility Principle:
A class or module should have one, and only one, reason to change. Each small class encapsulates a single responsibility, has a single reason to change, and collaborates with a few others to achieve the desired system behaviors.
Clean Code, Robert C. Martin, p138,140
%
Classes: Cohesion Should be High
Classes should have a small number of instance variables. Each of the methods of a class should manipulate one or more of those variables. In general the more variables a method manipulates the more cohesive that method is to its class. A class in which each variable is used by each method is maximally cohesive.
Clean Code, Robert C. Martin, p140
%
