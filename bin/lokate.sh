#!/bin/bash

function usage {
	local code
	code=$1
	cmd=$(basename $0)
	echo "
$cmd [--help|--man|-?] [--path|-p|--name|-n|--dir|-d|--ext|-e|--map|-m|--map-ext|-M] PATTERN [...options]

Similar to the locate(1) command but searches only locally generated mapping files instead of the whole system.

This will use the file listings generated by scan-tree.sh to locate files that were scanned.

PATTERN       The text to look for in the part of the filename specified.
-a --all      optional, default. Will match any part of the file/symlink name or path.
-p --path     Will match only within the directory path, ignoring file names.
-d --dir      Will match only within the directory name itself, ignoring file names and full path.
-e --ext      Will match only within the file extension without showing file names or paths.
-m --map      Will search the file name/extension only but also show the full path to the matching files.
-M --map-ext  Will search the full file extension only but also show the full path to the matching files.
options       Additional grep options to use [-i, -c, -v, -m, -n, -o, -q, -w, etc] may vary:
  -i          Ignore case distinctions in both the pattern and the scan files.
  -c          Suppress normal output; instead print a count of matching items.
  -m limit    Limit output to a maximum number of matching items and exit.
  -w          The expression is searched for as a word.
--man         Shows help for this tool.
--help        Shows help for this tool.
-?            Shows help for this tool.

This program assumes the scan files are named scan-*.lst in the home directory.

You can have the scan-*.lst files updated regularly with appropriate crontab lines:

  * * * * * mkdir -p /tmp/$LOGNAME && set > /tmp/$LOGNAME/crontab-set.log 2>&1
  */19 * * * * $HOME/bin/scan-tree.sh $HOME $HOME/scan- > /tmp/$LOGNAME/crontab-scan-tree.log  2>&1

See also scan-tree.sh, locatebk.sh, locatebkall.sh, locate, find

Example:

  Find directories for all Javascript projects except for those within node_modules.

  $cmd --map package.json | grep -v node_modules
"
	exit $code
}

function check_pattern {
	if [ -z "$PATTERN" ]; then
		echo "You must provide a PATTERN of text to search for."
		usage 2
	fi
}

PATTERN="$1"

case $PATTERN in
	--map|-m)
		shift;
		PATTERN="$1";
		shift;
		grep -E $* "^[^:]*$PATTERN[^:]*:" ~/scan-filemap.lst
		;;
	--map-ext|-M)
		shift;
		PATTERN="$1";
		shift;
		grep -E $* "^[^:]*\.$PATTERN:" ~/scan-filemap.lst
		;;
	--path|-p)
		shift;
		PATTERN="$1";
		shift;
		grep -E $* "$PATTERN" ~/scan-directories.lst
		;;
	--name|-n)
		shift;
		PATTERN="$1";
		shift;
		check_pattern
		grep -E $* "$PATTERN" ~/scan-filenames.lst
		;;
	--dir|-d)
		shift;
		PATTERN="$1";
		shift;
		check_pattern
		grep -E $* "$PATTERN" ~/scan-dirnames.lst
		;;
	--ext|-e)
		shift;
		PATTERN="$1";
		shift;
		check_pattern
		grep -E $* "$PATTERN" ~/scan-extensions.lst
		;;
	--all|-a)
		shift
		PATTERN="$1";
		shift;
		check_pattern
		grep --no-filename $* "$PATTERN" ~/scan-files.lst ~/scan-links-files.lst
		;;
	--man|--help|-\?)
		usage 0
		;;
	-*)
		echo "Invalid option $PATTERN"
		usage 1
		;;
	*)
		shift
		check_pattern
		grep --no-filename $* "$PATTERN" ~/scan-files.lst ~/scan-links-files.lst
		;;
esac
